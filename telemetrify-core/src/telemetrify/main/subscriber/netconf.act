# Copyright (C) Deutsche Telekom AG
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import logging
import net
import time
import xml

import telemetrify.net.netconf as netconf
import telemetrify.nsoapi.schema as schema

from telemetrify.common.mod import *
from telemetrify.common.utils import *
from telemetrify.nsoapi.schema import SchemaPath
from telemetrify.yang.xpath import *
from telemetrify.main.common import *
from telemetrify.main.config import *
from telemetrify.main.source.netconf import *

#
# Netconf RPC/Action poller
#

actor NetconfRpcPollSubscription(
        uid: int,
        on_closed: action() -> None,
        shared_schema: schema.SharedSchema,
        log_handler: ?logging.Handler):

    var logh = logging.Handler("netconf-rpc-poll")
    if log_handler is not None:
        logh.set_handler(log_handler)

    var log = logging.Logger(logh)

    _schema = schema.unsafe_get_shared_schema(shared_schema)

    var base_flow_params = tnode_root()

    var poller_seqno: int = 0
    var rpc_xml: ?xml.Node = None
    var is_action: bool = False

    var schema_path: ?SchemaPath = None
    var period: time.Duration = time.Duration(60, 0, time.MonotonicClock(0, 0, 0))

    # # Workaround compiler ordering issue
    # var subscriber_base = SubscriberMixin(
    #     uid,
    #     _start,
    #     _stop,
    #     update_sub_config,
    #     source_msg_trampoline,
    #     lambda: None,
    #     write_reset,
    #     output_upstream_msg_trampoline,
    #     on_closed,
    #     log)
    var subscriber_base = SubscriberMixin(
        uid,
        lambda: None,
        lambda: None,
        lambda c: None,
        lambda m: None,
        lambda: None,
        lambda b: None,
        lambda m: None,
        lambda: None,
        log)

    log.info("SUBSCRIBER netconf-rpc-poll CREATED", None)

    def _do_rpc_request(seqno: int, poll_ts: time.Instant):
        if seqno != poller_seqno:
            return

        _source = subscriber_base.get_source()
        if rpc_xml is not None and _source is not None and isinstance(_source, NetconfSource):
            source: NetconfSource = _source

            request_ts = time.time()

            if is_action:
                source.rpc_action(rpc_xml, [], lambda r: _on_rpc_reply(seqno, poll_ts, request_ts, r))
            else:
                source.rpc(rpc_xml, [], lambda r: _on_rpc_reply(seqno, poll_ts, request_ts, r))

    def _on_rpc_reply(seqno: int, last_ts: time.Instant, request_ts: time.Instant, node: ?xml.Node):
        if seqno != poller_seqno:
            return

        if node is not None:
            if node.tag == "rpc-reply":
                xnode = netconf.netconf_to_xnode(node, [], OP_MERGE)
                # Replace <rpc-reply> with root node
                xnode = XTree(xnode.op(), ITag.root(), xnode.namespaces(), xnode.children())
                log.debug("SUBSCRIBER netconf-rpc-poll POLL:", {"xnode": xnode})
                flow_params = create_data_flow_params(base_flow_params, schema_path)
                subscriber_base.write(uid, xnode, flow_params)
        else:
            log.error("SUBSCRIBER netconf-rpc-poll POLL interrupted", None)

        curr_ts = time.monotonic()
        next_ts = last_ts.add(period)

        if next_ts < curr_ts:
            # Allow drift when reply arrived later than next period
            # TODO: Quantize to period?
            next_ts = curr_ts

        delay = next_ts.since(curr_ts)
        log.debug("  ... delay " + str(delay.to_float()) + "s", None)
        after delay.to_float(): _do_rpc_request(seqno, next_ts)

    def update_config(update: SubscriberUpdate):
        subscriber_base.update_config(update)

    def update_sub_config(config: TNode):
        log.debug("SUBSCRIBER netconf-rpc-poll CONFIG", {"config": config})

        base_flow_params = get_subscription_base_flow_params(config)

        poll = config[SUBSCRIPTION_TYPE_TAG_NETCONF_RPC_POLLER]
        path = poll[PTag('tlm', 'path')].try_str()
        input_params = poll[PTag('tlm', 'input')]
        period_ms = poll[PTag('tlm', 'period')].try_int()

        if path is not None:
            keypath = xpath_to_keypath(path)
            if keypath is not None:
                params = tnode_root()
                for p_elem in input_params:
                    p_path = p_elem[PTag('tlm', 'path')].try_str()
                    if p_path is not None:
                        p_keypath = xpath_to_keypath(p_path)
                        if p_keypath is not None:
                            p_value = p_elem[PTag('tlm', 'value')].try_str()
                            if p_value is not None:
                                params.tree_path(None, p_keypath.get_slice(0, -1)).leaf(None, p_keypath[-1], p_value)
                            else:
                                params.tree_path(None, p_keypath)
                _update_rpc_params(config, keypath, params)

        if period_ms is not None and rpc_xml is not None:
            period = time.Duration(period_ms // 10**3, (period_ms % 10**3) * 10**15, time.MonotonicClock(0, 0, 0))
            log.debug("period: " + str(period.to_float()) + "s", None)
        else:
            pass # TODO: Indicate config error

    def _update_rpc_params(config: TNode, rpc_path: Keypath, input_params: Node):
        _rpc_xml: ?xml.Node = None
        _is_action = False
        _schema_path: ?SchemaPath = None

        cursor = schema.Cursor(_schema)
        if cursor.push_schema_path(SchemaPath([PTag('ncs', 'devices'), PTag('ncs', 'device')], [])):
            is_cursor_ok = False
            rpc_path_len = len(rpc_path)
            if rpc_path_len == 1:
                # NED-RPC
                if cursor.push(PTag('ncs', 'rpc')):
                    # Defaulting to device live-status ned-id unless explicitly set for subscription source
                    if cursor.node().is_mount_point():
                        ned_id = get_subscription_source_ned_id(config)
                        if ned_id is not None:
                            cursor.set_mount_id(ned_id)
                    unmangled_rpc_tag = rpc_path[0]
                    if isinstance(unmangled_rpc_tag, PTag):
                        prefix = unmangled_rpc_tag.prefix
                        name = unmangled_rpc_tag.name
                        if cursor.push(PTag(prefix, 'rpc-' + name)) and cursor.push(unmangled_rpc_tag):
                            is_cursor_ok = True
            elif rpc_path_len > 1:
                # NED-ACTION
                if cursor.push(PTag('ncs', 'live-status')): # TODO: Any benefit to using PTag('ncs', 'config') instead? All actions are duplicated right?
                    # Defaulting to device live-status ned-id unless explicitly set for subscription source
                    if cursor.node().is_mount_point():
                        ned_id = get_subscription_source_ned_id(config)
                        if ned_id is not None:
                            cursor.set_mount_id(ned_id)
                    is_cursor_ok = True
                    for _id in rpc_path:
                        if isinstance(_id, Tag) and not cursor.push(_id):
                            is_cursor_ok = False
                            break
                    _is_action = True

            if is_cursor_ok:
                rpc_itag = cursor.lookup_itag(cursor.node().tag)
                if rpc_itag is not None:
                    # RPC
                    rpc_name = rpc_itag.name
                    ns = rpc_itag.ns
                    nsdefs = [(None, ns)] if ns is not None else []
                    _schema_path = cursor.get_schema_path()

                    # Params
                    xml_input_params: list[xml.Node] = netconf.node_to_netconf(input_params, cursor, ns)

                    # RPC XML
                    _rpc_xml = xml.Node(rpc_itag.name, nsdefs, None, [], xml_input_params, None, None)

                    # TODO: Configurable input params?

        rpc_xml = _rpc_xml
        is_action = _is_action
        schema_path = _schema_path

    def write_reset(broadcast: bool) -> None:
        log.trace("SUBSCRIBER netconf-rpc-poll WRITE RESET", None)

        cleanup_payload = XTree(OP_NOCREATE, ITag.root(), None, []) # TODO
        flow_params = create_reset_flow_params(base_flow_params, schema_path, broadcast)
        subscriber_base.write(uid, cleanup_payload, flow_params)

    def _start():
        log.debug("SUBSCRIBER netconf-rpc-poll START", None)
        log.trace("SUBSCRIBER netconf-rpc-poll RPC_XML", {"rpc_xml": optional_str(rpc_xml, "None")})
        if rpc_xml is not None:
            curr_ts = time.monotonic()
            after 0: _do_rpc_request(poller_seqno, curr_ts)
        subscriber_base.on_started()

    def _stop():
        log.debug("SUBSCRIBER netconf-rpc-poll STOP", None)

        # stop poller
        poller_seqno += 1

        subscriber_base.on_stopped()

    def close():
        subscriber_base.close()

    def source_msg_trampoline(msg: Message) -> None:
        subscriber_base.on_source_msg(msg)

    def output_upstream_msg_trampoline(msg: Message) -> None:
        subscriber_base.on_output_upstream_msg(msg)

    def _on_closed():
        log.debug("SUBSCRIBER netconf-rpc-poll CLOSED", None)
        on_closed()

    # # Workaround compiler ordering issue
    subscriber_base._start_fn = _start
    subscriber_base._stop_fn = _stop
    subscriber_base._update_sub_config_fn = update_sub_config
    subscriber_base.source_mixin._source_msg_trampoline_fn = source_msg_trampoline
    #subscriber_base.output_mixin.resync_source = lambda: None
    subscriber_base.output_mixin.output_upstream_msg_trampoline = output_upstream_msg_trampoline
    subscriber_base.write_reset = write_reset
    subscriber_base.on_closed_fn = _on_closed

#
# Netconf Get poller
#

actor NetconfGetPollSubscription(
        uid: int,
        on_closed: action() -> None,
        shared_schema: schema.SharedSchema,
        log_handler: ?logging.Handler):

    var logh = logging.Handler("netconf-get-poll")
    if log_handler is not None:
        logh.set_handler(log_handler)

    var log = logging.Logger(logh)

    _schema = schema.unsafe_get_shared_schema(shared_schema)

    var base_flow_params = tnode_root()

    var poller_seqno: int = 0
    var get_xml: ?xml.Node = None
    var schema_path: ?SchemaPath = None
    var period: time.Duration = time.Duration(60, 0, time.MonotonicClock(0, 0, 0))

    # # Workaround compiler ordering issue
    # var subscriber_base = SubscriberMixin(
    #     uid,
    #     _start,
    #     _stop,
    #     update_sub_config,
    #     source_msg_trampoline,
    #     lambda: None,
    #     write_reset,
    #     output_upstream_msg_trampoline,
    #     on_closed,
    #     log)
    var subscriber_base = SubscriberMixin(
        uid,
        lambda: None,
        lambda: None,
        lambda c: None,
        lambda m: None,
        lambda: None,
        lambda b: None,
        lambda m: None,
        lambda: None,
        log)

    log.info("SUBSCRIBER netconf-get-poll CREATED", None)

    def _do_get_request(seqno: int, poll_ts: time.Instant):
        if seqno != poller_seqno:
            return
        log.debug("SUBSCRIBER netconf-get-poll GET_REQUEST", None)

        log.trace("SUBSCRIBER netconf-get-poll GET_XML", {"get_xml": optional_str(get_xml, "None")})
        _source = subscriber_base.get_source()
        if get_xml is not None and _source is not None and isinstance(_source, NetconfSource):
            source: NetconfSource = _source

            request_ts = time.time()

            source.rpc(get_xml, [], lambda r: _on_get_reply(seqno, poll_ts, request_ts, r))

    def _on_get_reply(seqno: int, last_ts: time.Instant, request_ts: time.Instant, node: ?xml.Node):
        log.debug("SUBSCRIBER netconf-get-poll GET_REPLY", None)
        if seqno != poller_seqno:
            return

        if node is not None:
            if node.tag == "rpc-reply":
                 node = node.children[0]
                 if node.tag == "data" and len(node.children) >= 1:
                     node = node.children[0]
                     xnode = netconf.netconf_to_xnode(node, [], OP_MERGE)
                     log.trace("SUBSCRIBER netconf-get-poll POLL:", {"xnode": xnode})
                     flow_params = create_data_flow_params(base_flow_params, schema_path)
                     subscriber_base.write(uid, xnode, flow_params)
        else:
            pass
            log.error("SUBSCRIBER netconf-get-poll POLL interrupted", None)

        curr_ts = time.monotonic()
        next_ts = last_ts.add(period)

        if next_ts < curr_ts:
            # Allow drift when reply arrived later than next period
            # TODO: Quantize to period?
            next_ts = curr_ts

        delay = next_ts.since(curr_ts)
        log.debug("  ... delay " + str(delay.to_float()) + "s", None)
        after delay.to_float(): _do_get_request(seqno, next_ts)

    def update_config(update: SubscriberUpdate):
        subscriber_base.update_config(update)

    def update_sub_config(config: TNode):
        log.debug("SUBSCRIBER netconf-get-poll CONFIG", {"config": config})

        base_flow_params = get_subscription_base_flow_params(config)

        poll = config[SUBSCRIPTION_TYPE_TAG_NETCONF_GET_POLLER]
        path = poll[PTag('tlm', 'path')].try_str()
        period_ms = poll[PTag('tlm', 'period')].try_int()

        if path is not None:
            keypath = xpath_to_keypath(path)
            if keypath is not None:
                _update_get_params(config, keypath)

        if period_ms is not None and get_xml is not None:
            period = time.Duration(period_ms // 10**3, (period_ms % 10**3) * 10**15, time.MonotonicClock(0, 0, 0))
            log.debug("period: " + str(period.to_float()) + "s", None)
        else:
            pass # TODO: Indicate config error

    def _update_get_params(config: TNode, get_path: Keypath):
        _get_xml: ?xml.Node = None
        _is_action = False
        _schema_path: ?SchemaPath = None

        cursor = schema.Cursor(_schema)
        if cursor.push_schema_path(SchemaPath([PTag('ncs', 'devices'), PTag('ncs', 'device')], [])):
            is_cursor_ok = False
            _get_path: list[(str, list[(?str,str)])] = []

            # NED-GET
            if cursor.push(PTag('ncs', 'live-status')):
                # Defaulting to device live-status ned-id unless explicitly set for subscription source
                if cursor.node().is_mount_point():
                    ned_id = get_subscription_source_ned_id(config)
                    if ned_id is not None:
                        cursor.set_mount_id(ned_id)
                is_cursor_ok = True
                for _id in get_path:
                    if isinstance(_id, Tag) and not cursor.push(_id):
                        # TODO: print some error or something?
                        log.error("Invalid subscription path, bad node:", {"_id": _id})
                        is_cursor_ok = False
                        break

                    get_itag = cursor.lookup_itag(cursor.node().tag)
                    if get_itag is not None:
                        _ns: ?str = get_itag.ns
                        if _ns is not None:
                            _nsdef: (?str,str) = (None, _ns)
                            _get_path.append((get_itag.name, [_nsdef]))
                        else:
                            _get_path.append((get_itag.name, []))

            if is_cursor_ok:
                get_itag = cursor.lookup_itag(cursor.node().tag)
                if get_itag is not None:
                    get_name = get_itag.name
                    ns = get_itag.ns
                    nsdefs = [(None, ns)] if ns is not None else []
                    _filter_node: ?xml.Node = None
                    if len(_get_path) > 0:
                        for _itag in reversed(_get_path):
                            if _filter_node is not None:
                                _children = [_filter_node]
                            else:
                                _children = []

                            _filter_node = xml.Node(_itag.0, _itag.1, None, [], _children, None, None)

                        if _filter_node is not None:
                            _filter_node = xml.Node("filter", [], None, [], [_filter_node], None, None)

                    nc_nsdefs = [(None, netconf.NS_NC_1_1)]
                    if _filter_node is not None:
                        _get_xml = xml.Node("get", nc_nsdefs, None, [], [_filter_node], None, None)
                    else:
                        # TODO: this shoule be some form of error, right?
                        _get_xml = xml.Node("get", nc_nsdefs, None, [], [], None, None)
                    _schema_path = cursor.get_schema_path()
                    # TODO: Configurable input params?

        get_xml = _get_xml
        schema_path = _schema_path

    def write_reset(broadcast: bool) -> None:
        log.trace("SUBSCRIBER netconf-get-poll WRITE RESET", None)

        cleanup_payload = XTree(OP_NOCREATE, ITag.root(), None, []) # TODO
        flow_params = create_reset_flow_params(base_flow_params, schema_path, broadcast)
        subscriber_base.write(uid, cleanup_payload, flow_params)

    def _start():
        log.debug("SUBSCRIBER netconf-get-poll START", None)
        log.trace("SUBSCRIBER netconf-get-poll GET_XML", {"get_xml": optional_str(get_xml, "None")})
        if get_xml is not None:
            curr_ts = time.monotonic()
            after 0: _do_get_request(poller_seqno, curr_ts)
        subscriber_base.on_started()

    def _stop():
        log.debug("SUBSCRIBER netconf-get-poll STOP", None)

        # stop poller
        poller_seqno += 1

        subscriber_base.on_stopped()

    def close():
        subscriber_base.close()

    def source_msg_trampoline(msg: Message) -> None:
        subscriber_base.on_source_msg(msg)

    def output_upstream_msg_trampoline(msg: Message) -> None:
        subscriber_base.on_output_upstream_msg(msg)

    def _on_closed():
        log.debug("SUBSCRIBER netconf-get-poll CLOSED", None)
        on_closed()

    # # Workaround compiler ordering issue
    subscriber_base._start_fn = _start
    subscriber_base._stop_fn = _stop
    subscriber_base._update_sub_config_fn = update_sub_config
    subscriber_base.source_mixin._source_msg_trampoline_fn = source_msg_trampoline
    #subscriber_base.output_mixin.resync_source = lambda: None
    subscriber_base.output_mixin.output_upstream_msg_trampoline = output_upstream_msg_trampoline
    subscriber_base.write_reset = write_reset
    subscriber_base.on_closed_fn = _on_closed
