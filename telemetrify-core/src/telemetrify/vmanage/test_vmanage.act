# Copyright (C) Deutsche Telekom AG
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import argparse
import http
import logging
import math
import net
import random
import testing
import uri

import telemetrify.vmanage.vmanage as vmanage

class _Loc(object):
    def __init__(self, name: str, code: str, country: str, latitude: float, longitude: float):
        self.name = name
        self.code = code
        self.country = country
        self.latitude = latitude
        self.longitude = longitude

_locations: list[_Loc] = [
    _Loc("New York City", "nyc", "USA", 40.7128, -74.0060),
    _Loc("Los Angeles", "la", "USA", 34.0522, -118.2437),
    _Loc("Chicago", "chi", "USA", 41.8781, -87.6298),
    _Loc("Houston", "hou", "USA", 29.7604, -95.3698),
    _Loc("Miami", "mia", "USA", 25.7617, -80.1918),
    _Loc("Toronto", "tor", "Canada", 43.6532, -79.3832),
    _Loc("Vancouver", "van", "Canada", 49.2827, -123.1207),
    _Loc("Montreal", "mtl", "Canada", 45.5017, -73.5673),
    _Loc("London", "lon", "UK", 51.5074, -0.1278),
    _Loc("Paris", "par", "France", 48.8566, 2.3522),
    _Loc("Berlin", "ber", "Germany", 52.5200, 13.4050),
    _Loc("Tokyo", "tky", "Japan", 35.6895, 139.6917),
    _Loc("Beijing", "bj", "China", 39.9042, 116.4074),
    _Loc("Delhi", "del", "India", 28.6139, 77.2090),
    _Loc("Sydney", "syd", "Australia", -33.8688, 151.2093),
    _Loc("Cairo", "cai", "Egypt", 30.8025, 31.2357),
    _Loc("Cape Town", "cpt", "South Africa", -33.9249, 18.4241),
    _Loc("Moscow", "mos", "Russia", 55.7558, 37.6173),
    _Loc("Sao Paulo", "sao", "Brazil", -23.5505, -46.6333),
    _Loc("Mexico City", "mex", "Mexico", 19.4326, -99.1332),
    _Loc("Rio de Janeiro", "rio", "Brazil", -22.9068, -43.1729),
    _Loc("Singapore", "sgp", "Singapore", 1.3521, 103.8198),
    _Loc("Bangkok", "bkk", "Thailand", 13.7563, 100.5018),
    _Loc("Buenos Aires", "ba", "Argentina", -34.6037, -58.3816),
    _Loc("Seoul", "sel", "South Korea", 37.5665, 126.9780),
    _Loc("Istanbul", "ist", "Turkey", 41.0082, 28.9784),
    _Loc("Dubai", "dxb", "UAE", 25.276987, 55.296249),
    _Loc("Rome", "rom", "Italy", 41.9028, 12.4964),
    _Loc("Madrid", "mad", "Spain", 40.4168, -3.7038),
    _Loc("Athens", "ath", "Greece", 37.9838, 23.7275),
    _Loc("Oslo", "osl", "Norway", 59.9139, 10.7522),
    _Loc("Stockholm", "sto", "Sweden", 59.3293, 18.0686),
    _Loc("Copenhagen", "cph", "Denmark", 55.6761, 12.5683),
    _Loc("Dublin", "dub", "Ireland", 53.3498, -6.2603),
    _Loc("Wellington", "wel", "New Zealand", -41.2865, 174.7762),
    _Loc("Jakarta", "jkt", "Indonesia", -6.2088, 106.8456),
    _Loc("Kuala Lumpur", "kl", "Malaysia", 3.1390, 101.6869),
    _Loc("Hanoi", "han", "Vietnam", 21.0285, 105.8544),
    _Loc("Manila", "mnl", "Philippines", 14.5995, 120.9842),
    _Loc("Lisbon", "lis", "Portugal", 38.7223, -9.1393),
    _Loc("Amsterdam", "ams", "Netherlands", 52.3676, 4.9041),
    _Loc("Brussels", "bru", "Belgium", 50.8503, 4.3517),
    _Loc("Vienna", "vie", "Austria", 48.2082, 16.3738),
    _Loc("Prague", "prg", "Czech Republic", 50.0755, 14.4378),
    _Loc("Warsaw", "waw", "Poland", 52.2297, 21.0122),
    _Loc("Budapest", "bud", "Hungary", 47.4979, 19.0402),
    _Loc("Zurich", "zrh", "Switzerland", 47.3769, 8.5417),
    _Loc("Helsinki", "hel", "Finland", 60.1695, 24.9354),
    _Loc("Edinburgh", "edi", "UK", 55.9533, -3.1883),
    _Loc("Mumbai", "bom", "India", 19.0760, 72.8777),
    _Loc("Shanghai", "sha", "China", 31.2304, 121.4737),
    _Loc("Hong Kong", "hkg", "China", 22.3193, 114.1694),
    _Loc("Taipei", "tpe", "Taiwan", 25.0330, 121.5654),
    _Loc("Bangalore", "blr", "India", 12.9716, 77.5946),
    _Loc("Johannesburg", "jhb", "South Africa", -26.2041, 28.0473),
    _Loc("Melbourne", "mel", "Australia", -37.8136, 144.9631),
    _Loc("Santiago", "scl", "Chile", -33.4489, -70.6693),
    _Loc("Lima", "lim", "Peru", -12.0464, -77.0428),
    _Loc("Bogota", "bog", "Colombia", 4.7100, -74.0721),
    _Loc("Reykjavik", "rek", "Iceland", 64.1265, -21.8174),
    _Loc("Casablanca", "cas", "Morocco", 33.5731, -7.5898),
    _Loc("Nairobi", "nbo", "Kenya", -1.2921, 36.8219),
    _Loc("Tehran", "thr", "Iran", 35.6892, 51.3890),
    _Loc("Dhaka", "dac", "Bangladesh", 23.8103, 90.4125),
    _Loc("Karachi", "khi", "Pakistan", 24.8607, 67.0011),
    _Loc("Kiev", "iev", "Ukraine", 50.4501, 30.5234),
    _Loc("Lahore", "lhe", "Pakistan", 31.5204, 74.3587),
    _Loc("Riyadh", "ruh", "Saudi Arabia", 24.7136, 46.6753),
    _Loc("Qatar", "doh", "Qatar", 25.3548, 51.1839),
    _Loc("Jerusalem", "jrs", "Israel", 31.7683, 35.2137),
    _Loc("Beirut", "bey", "Lebanon", 33.8938, 35.5018),
    _Loc("Damascus", "dam", "Syria", 33.5138, 36.2765),
    _Loc("Harare", "har", "Zimbabwe", -17.8252, 31.0335),
    _Loc("Algiers", "alg", "Algeria", 36.7372, 3.0868),
    _Loc("Accra", "acc", "Ghana", 5.6037, -0.1870),
    _Loc("Kampala", "kla", "Uganda", 0.3476, 32.5825),
    _Loc("Antananarivo", "tnr", "Madagascar", -18.8792, 47.5079),
    _Loc("Luanda", "lun", "Angola", -8.8390, 13.2894),
    _Loc("Lusaka", "lun", "Zambia", -15.3875, 28.3228),
    _Loc("Gaborone", "gbe", "Botswana", -24.6282, 25.9231),
    _Loc("Windhoek", "wdh", "Namibia", -22.5609, 17.0658),
    _Loc("Maputo", "mpm", "Mozambique", -25.891968, 32.605135),
    _Loc("Kigali", "kgl", "Rwanda", -1.9403, 29.8739),
    _Loc("Bujumbura", "bjm", "Burundi", -3.3822, 29.3644),
    _Loc("Addis Ababa", "add", "Ethiopia", 9.03, 38.74),
    _Loc("Djibouti", "jib", "Djibouti", 11.5721, 43.1456),
    _Loc("Mogadishu", "mgq", "Somalia", 2.0469, 45.3182),
    _Loc("Asmara", "asm", "Eritrea", 15.3229, 38.9251),
    _Loc("Libreville", "lbv", "Gabon", 0.4162, 9.4673),
    _Loc("Bamako", "bko", "Mali", 12.6392, -8.0029),
    _Loc("Nouakchott", "nkc", "Mauritania", 18.0893, -15.9785),
    _Loc("Podgorica", "tgd", "Montenegro", 42.4304, 19.2594),
    _Loc("Tirana", "tia", "Albania", 41.3275, 19.8187),
    _Loc("Yerevan", "evn", "Armenia", 40.1792, 44.4991),
    _Loc("Baku", "gyd", "Azerbaijan", 40.4093, 49.8671),
    _Loc("Astana", "tse", "Kazakhstan", 51.1694, 71.4491),
    _Loc("Tashkent", "tas", "Uzbekistan", 41.2995, 69.2401),
    _Loc("Ulaanbaatar", "uln", "Mongolia", 47.8864, 106.9057),
    _Loc("Rangoon", "rgn", "Myanmar", 16.8661, 96.1951),
    _Loc("Phnom Penh", "pnh", "Cambodia", 11.5564, 104.9282),
    _Loc("Kingston", "kin", "Jamaica", 18.0179, -76.8099),
    _Loc("Castries", "slu", "Saint Lucia", 14.0101, -60.9870),
    _Loc("Roseau", "dom", "Dominica", 15.3017, -61.3881),
    _Loc("Basseterre", "skb", "Saint Kitts and Nevis", 17.3026, -62.7177),
    _Loc("Havana", "hav", "Cuba", 23.1136, -82.3666),
    _Loc("San Salvador", "sal", "El Salvador", 13.6894, -89.1872),
    _Loc("Panama City", "pty", "Panama", 8.9833, -79.5167),
]

def _haversine_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    """Calculate the great circle distance in kilometers between two points on
    the earth (specified in decimal degrees)
    """
    def radians(degrees):
        return degrees * math.pi / 180.0

    def atan2(y: float, x: float) -> float:
        """Compute arctangent of y/x using the signs of the two arguments to
        determine the quadrant of the result."""

        if x > 0.0:
            return math.atan(y / x)
        elif y >= 0.0 and 0.0 > x:
            return math.atan(y / x) + math.pi
        elif y < 0.0 and 0.0 < x:
            return math.atan(y / x) + 2.0 * math.pi
        elif y <= 0.0 and 0.0 < x:
            return math.atan(y / x) - math.pi
        elif x == 0.0 and y != 0.0:
            return math.pi / 2.0
        return 0.0  # undefined, but return 0 for simplicity

    # Convert decimal degrees to radians
    lat1 = radians(lat1)
    lon1 = radians(lon1)
    lat2 = radians(lat2)
    lon2 = radians(lon2)

    # Haversine formula
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
    c = 2 * atan2(math.sqrt(a), math.sqrt(1-a))

    # Radius of earth in kilometers. Use 6371 for the Earth's radius.
    r = 6371.0
    distance = r * c

    return distance

class _Session(object):
    def __init__(self, s1: _Loc, s2: _Loc):
        self.name = "%s-%s" % (s1.name, s2.name)
        self.s1 = s1
        self.s2 = s2
        self.distance = _haversine_distance(s1.latitude, s1.longitude, s2.latitude, s2.longitude)
        self.min_latency = self.distance / 100.0
        self.max_latency = self.min_latency * float(random.randint(100, 140)) / 100.0
        self.latency = self.min_latency
        self.direction = 1
        #print(self.name, self.distance)

class _MockAppRoute(object):
    def __init__(self, min_sites: int, max_sites: int):
        self.number_of_sites = random.randint(min_sites, max_sites)
        self.sites = random.sample(_locations, self.number_of_sites)

        self.sessions = {}
        for i in range(0, self.number_of_sites, 1):
            for j in range(i+1, self.number_of_sites, 1):
                site1 = self.sites[i]
                site2 = self.sites[j]
                dist = _haversine_distance(site1.latitude, site1.longitude, site2.latitude, site2.longitude)
                min_latency: float = dist / 100.0
                max_latency = min_latency * 1.0 + float(random.randint(1, 4))/10.0
                sess = _Session(site1, site2)
                self.sessions[sess.name] = sess

    def poll(self):
        data = []
        for link_name, sess in self.sessions.items():
            if random.randint(0, 100) < 27:
                sess.direction *= -1  # switch direction

            step = (float(random.randint(1, 100)) / 1000.0) * sess.direction
            sess.latency += step

            # Ensure the latency remains in the computed range
            sess.latency = min([max([sess.latency, sess.min_latency], None), sess.max_latency], None)

            sdata = {
#                "remote_color": "public-internet",
#                "fec_re": 0,
#                "vqoe_score": 10,
#                "device_model": "vedge-C8000V",
                "latency": round(sess.latency, None),
#                "tx_octets": 0,
#                "dst_ip": "10.1.2.1",
#                "local_color": "public-internet",
#                "src_ip": "10.1.3.1",
#                "sla_class_names": "__all_tunnels__",
#                "loss": 0,
#                "total": 664,
#                "tx_pkts": 0,
#                "fec_tx": 0,
#                "rx_octets": 0,
#                "statcycletime": 1234,
#                "siteid": 230,
#                "state": "Up",
#                "local_system_ip": "10.100.3.1",
#                "tenant": "default",
#                "entry_time": 1234,
#                "loss_percentage": 0,
#                "app_probe_class": "None",
#                "rx_pkts": 0,
#                "vmanage_system_ip": "10.100.3.1",
#                "fec_rx": 0,
#                "src_port": 12407,
#                "jitter": random.randint(1, 4),
#                "remote_system_ip": "10.100.2.1",
#                "vdevice_name": "10.100.3.1",
#                "proto": "IPSEC",
#                "vip_idx": 394,
#                "dst_port": 12407,
                # TODO: should be using IP address, not name here
                "name": sess.s1.code + ":public-internet-" + sess.s2.code + ":public-internet",
#                "sla_class_list": "0",
#                "tunnel_color": "public-internet:public-internet",
#                "host_name": sess.s1.country.lower() + "-foo-" + sess.s1.code.lower() + "-1"
            }
            data.append(sdata)

        return data


def _test_mock_sites():
    m = _MockAppRoute(4, 25)
#    for i in range(0, 1, 1):
#        d = m.poll()
#        print("--")
#        for e in d:
#            print(e["name"], e["latency"])


actor main(env):
    tcpccap = net.TCPConnectCap(net.TCPCap(net.NetCap(env.cap)))
    log_handler = logging.Handler("vManage test")
    log_handler.add_sink(logging.StdoutSink())
    log_handler.set_output_level(logging.WARNING)
    log = logging.Logger(log_handler)

    var vh: ?vmanage.VManageHTTPClient = None

#    def _exit():
#        print("Exiting after timeout")
#        env.exit(1)
#    after 5.0: _exit()

    def _cmd_poll(args):
        tcpccap = net.TCPConnectCap(net.TCPCap(net.NetCap(env.cap)))
        u = uri.URI(args.get_str("url"))
        host = u.host
        port = u.port

        def _poll():
            if vh is not None:
                vh.get("/dataservice/statistics/approute", _on_approute)
            else:
                print("Wanted to pull but have no vManage client")
            after 10.0: _poll()

        def _on_connect(c):
            _poll()

        def _on_approute(c, data: http.Response):
            print("Got AppRoute statistics:", data.body)
            ar = data.decode_json()
            ar_data = ar["data"]
            if isinstance(ar_data, list):
                xn = vmanage.approute_to_xnode(ar_data)
                print(xn)

        if host != None and port != None:
            vh = vmanage.VManageHTTPClient(tcpccap, host, port, args.get_str("username"), args.get_str("password"), _on_connect, log_handler)
        else:
            print("Invalid URL")
            env.exit(1)

    def _parse_args():
        p = argparse.Parser()
        p.add_bool("debug", "Enable debug logging")
        pp = p.add_cmd("poll", "Poll", _cmd_poll)
        pp.add_arg("url", "URL of vManage server", True, "?")
        pp.add_option("username", "str", "?", None, "Username")
        pp.add_option("password", "str", "?", None, "Password")

        args = p.parse(env.argv)
        if args.get_bool("debug"):
            log_handler.set_output_level(logging.DEBUG)
        _cmd = args.cmd
        if _cmd is not None:
            _cmd(args)
        else:
            env.exit(0)
    try:
        _parse_args()
    except argparse.PrintUsage as exc:
        print(exc)
        env.exit(0)
    except argparse.ArgumentError as exc:
        print(exc)
        env.exit(1)
