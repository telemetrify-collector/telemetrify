import xml
from acton_streamer.common.mod import *
from acton_streamer.common.utils import *
from acton_streamer.nsoapi.proto import *
import acton_streamer.nsoapi.schema as schema
import tsdb.m3

_STATE_IDLE = 0

def dumb_push(cursor, name):
    """Stupid cursor.push() working around some problem
    """
    # The cursor.push can take an ITag and try to look it up into an HTag.
    # This fails, seemingly because the schema we are working on
    # (urn:junos-rpc) isn't in the NamespaceMaps, not sure why. We hack
    # around it by just iterating over HTags instead, get the corresponding
    # ITag, check the name and boom!
    for k,v in cursor.node().children.items():
        itag = cursor.lookup_itag(k)
        if itag is not None:
            if itag.name == name:
                cursor.push(k)
                return True
    return False

def flatten_tags(tag_stack: list[list[(str, str)]]) -> dict[str, str]:
    ret = {}

    for tags in tag_stack:
        for tag in tags:
            pass
            ret[tag.0] = tag.1

    return ret

def get_metrics_from_tree(node: Node, cursor: schema.Cursor, timestamp: int, path: list[str], tags: list[list[(str, str)]]) -> list[tsdb.m3.Metric]:
    s_node = cursor.node()

    print("Metric conversion at tags:", node.tag(), cursor.lookup_itag(s_node.tag))
    if len(s_node.keys) > 0:
        print("Metric conversion schema keys", cursor.lookup_itag(s_node.tag), "-", s_node.keys, cursor.lookup_itag(s_node.keys[0].tag))
    if isinstance(node, XLeaf):
        print("Metric conversion data node is XLeaf")
        leafval = node.value()
        floatval = None
        _tag = node.tag()
        #_type = s_node.value_type

        #if leafval is not None:
        #    #print("Metric conversion data node XLeaf type str value", str(_type))
        #    if isinstance(_type, schema.Decimal64Type):
        #        print("Metric conversion data node XLeaf str value", str(leafval))

        if _tag is not None:
            _itag = cursor.lookup_itag(_tag)
            if _itag is not None:
                print("Metric conversion data node XLeaf ITag name", _itag.name)
                #print("Metric conversion data node XLeaf", _itag.name, "str value", str(leafval))
                if leafval is not None:
                    #print("Metric conversion data node XLeaf str value", str(leafval))
                    print("Metric conversion data node XLeaf", _itag.name, "str value", str(leafval).strip("\n"))
                    #_type = s_node.value_type
                    #if _type is not None:
                    #    print("Metric conversion data node XLeaf type str value", str(_type))
                    #    if isinstance(_type, schema.Decimal64Type):
                    #        print("Metric conversion data node XLeaf str value", str(leafval))
                    if _itag.name == "input-packets":
                        print("Metric conversion data node XLeaf", _itag.name, "float value", float(str(leafval).strip("\n")))
                        floatval = float(str(leafval).strip("\n"))
        if floatval is not None:
            #print("Metric conversion tags:", flatten_tags(tags))
            return [tsdb.m3.Metric("_".join(path).replace("-", "_", None), flatten_tags(tags), floatval, timestamp)]
        else:
            return []
    elif isinstance(node, XTree):
        print("Metric conversion data node is XTree")
        ret = []
        key_names = []
        for key in s_node.keys:
            itag = cursor.lookup_itag(key.tag)
            if isinstance(itag, ITag):
                print("Metric conversion key itag:", itag)
                key_names.append(itag.name)
        print("Metric conversion key names", key_names)
        keyval_pairs = []
        non_key_children = []
        for child in node.children():
            tag = child.tag()
            if isinstance(tag, Tag):
                itag = cursor.lookup_itag(tag)
                if itag is not None:
                    if itag.name in key_names:
                        childval = child.value()
                        if childval is not None:
                            keyval_pairs.append(("_".join(path).replace("-", "_", None) + "_" + itag.name.replace("-", "_", None), str(childval).strip("\n")))
                    else:
                        non_key_children.append(child)

        tags.append(keyval_pairs)
        for child in non_key_children:
            tag = child.tag()
            if isinstance(tag, Tag):
                itag = cursor.lookup_itag(tag)
                if itag is not None:
                    if dumb_push(cursor, itag.name):
                        path.append(itag.name)
                        ret += get_metrics_from_tree(child, cursor, timestamp, path, tags)
                        path.pop(-1)
                        cursor.pop()
                    else:
                        print("Metric conversion tag not found in schema:", itag.name)
        tags.pop(-1)
            
        return ret
    else:
        print("Metric conversion data node not XTree or XLeaf")
        return []

actor TSDBWriter(m3c: tsdb.m3.Client):

    var write_tasks = Queue()

    # Current write task
    var prefix_epath: list[EObject] = []
    var result_cb: ?(action(?Exception) -> None) = None
    var state: int = _STATE_IDLE
    var work_stack: list[(value, int)] = [] # list[(v: value, _parent_state: int)]
    var epath: list[EObject] = [] # EKeypath
    var eparams: list[EObject] = []
    var pending_mount_id: ?HTag = None

    #def write(node: Node, thandle: int, use_ikp: bool, result_cb: action(?Exception) -> None):
    def write(node: Node, cursor: schema.Cursor, prefix: str, base_tags: list[(str, str)], timestamp: int, result_cb: action(TSDBWriter, ?Exception) -> None):
        metrics = get_metrics_from_tree(node, cursor, timestamp, [prefix], [base_tags])
        print("Metrics to write: ", metrics)
        #if len(metrics) > 0:
        #    print("First metric to write: ", metrics[0])
        #else:
        #    print("No metrics to write")

        print("About to iterate over metrics")
        for metric in metrics:
            print("Metric iteration")
            print("Metric to write", metric)
       
        result_cb(self, None)

    def _reset():
        prefix_epath = []
        result_cb = None
        state = _STATE_IDLE
        work_stack = []
        #cursor = schema.Cursor(_schema)
        epath = []
        eparams = []
        pending_mount_id = None

    def _poll():
        print("writer: begin poll")
        while True:
            if state == _STATE_IDLE:
                print("writer:   STATE_IDLE")
                if write_tasks:
                    print("writer:     Setup write task")
                    #_setup_next_task()
                else:
                    print("writer:     No tasks")
                    break

