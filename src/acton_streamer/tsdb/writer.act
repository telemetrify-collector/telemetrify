import xml
import re
from acton_streamer.common.mod import *
from acton_streamer.common.utils import *
from acton_streamer.nsoapi.proto import *
import acton_streamer.nsoapi.schema as schema
import tsdb.m3

_STATE_IDLE = 0

def dumb_push(cursor, name):
    """Stupid cursor.push() working around some problem
    """
    # The cursor.push can take an ITag and try to look it up into an HTag.
    # This fails, seemingly because the schema we are working on
    # (urn:junos-rpc) isn't in the NamespaceMaps, not sure why. We hack
    # around it by just iterating over HTags instead, get the corresponding
    # ITag, check the name and boom!
    for k,v in cursor.node().children.items():
        itag = cursor.lookup_itag(k)
        if itag is not None:
            if itag.name == name:
                cursor.push(k)
                return True
    return False

def flatten_tags(tag_stack: list[list[(str, str)]]) -> dict[str, str]:
    ret = {}

    for tags in tag_stack:
        for tag in tags:
            pass
            ret[tag.0] = tag.1

    return ret

def get_metrics_from_tree(node: Node, cursor: schema.Cursor, timestamp: int, path: list[str], tags: list[list[(str, str)]]) -> list[tsdb.m3.Metric]:
    s_node = cursor.node()

    print("Metric conversion at tags:", node.tag(), cursor.lookup_itag(s_node.tag))
    if len(s_node.keys) > 0:
        print("Metric conversion schema keys", cursor.lookup_itag(s_node.tag), "-", s_node.keys, cursor.lookup_itag(s_node.keys[0].tag))
    if isinstance(node, XLeaf):
        print("Metric conversion data node is XLeaf")
        leafval = node.value()
        floatval = None
        _tag = node.tag()

        if _tag is not None:
            _itag = cursor.lookup_itag(_tag)
            if _itag is not None:
                if leafval is not None:
                    print("Metric conversion data node XLeaf", _itag.name, "str value", str(leafval).strip("\n"))
                    _type = s_node.value_type
                    if _type is not None:
                        print("Metric conversion", _itag.name, "schema type is", str(_type))
                        if isinstance(leafval, str):
                            nativeval = _type.netconf_to_value(leafval.strip("\n"), cursor, node.namespaces())
                            if nativeval is not None:
                                print("Metric conversion data node XLeaf type native value", str(nativeval))
                                if isinstance(nativeval, int):
                                    print("Metric conversion data node XLeaf type int")
                                    return [tsdb.m3.Metric("_".join(path).replace("-", "_", None), flatten_tags(tags), float(nativeval), timestamp)]
                                elif isinstance(nativeval, float):
                                    print("Metric conversion data node XLeaf type float")
                                    return [tsdb.m3.Metric("_".join(path).replace("-", "_", None), flatten_tags(tags), nativeval, timestamp)]
                        else:
                            print("leafval is not a str, skipping...")
                    else:
                        print("Metric conversion", _itag.name, "schema type is None")

                        trimmed_strval = str(leafval).strip("\n")
                        floatval = try_parse_float(trimmed_strval)
                        if floatval is not None:
                            return [tsdb.m3.Metric("_".join(path).replace("-", "_", None), flatten_tags(tags), floatval, timestamp)]
                        else:
                            print("Metric conversion", _itag.name, "value cannot convert to float.")
        return []
    elif isinstance(node, XTree):
        print("Metric conversion data node is XTree")
        ret = []
        key_names = []
        for key in s_node.keys:
            itag = cursor.lookup_itag(key.tag)
            if isinstance(itag, ITag):
                print("Metric conversion key itag:", itag)
                key_names.append(itag.name)
        print("Metric conversion key names", key_names)
        keyval_pairs = []
        non_key_children = []
        for child in node.children():
            tag = child.tag()
            if isinstance(tag, Tag):
                itag = cursor.lookup_itag(tag)
                if itag is not None:
                    if itag.name in key_names:
                        childval = child.value()
                        if childval is not None:
                            keyval_pairs.append(("_".join(path).replace("-", "_", None) + "_" + itag.name.replace("-", "_", None), str(childval).strip("\n")))
                    else:
                        non_key_children.append(child)

        tags.append(keyval_pairs)
        for child in non_key_children:
            tag = child.tag()
            if isinstance(tag, Tag):
                itag = cursor.lookup_itag(tag)
                if itag is not None:
                    if dumb_push(cursor, itag.name):
                        path.append(itag.name)
                        ret += get_metrics_from_tree(child, cursor, timestamp, path, tags)
                        path.pop(-1)
                        cursor.pop()
                    else:
                        print("Metric conversion tag not found in schema:", itag.name)
        tags.pop(-1)

        return ret
    else:
        print("Metric conversion data node not XTree or XLeaf")
        return []

actor TSDBWriter(m3c: tsdb.m3.Client, shared_schema: schema.SharedSchema):

    var write_tasks = Queue()

    # Current write task
    var prefix_epath: list[EObject] = []
    var state: int = _STATE_IDLE
    var work_stack: list[(value, int)] = [] # list[(v: value, _parent_state: int)]
    var epath: list[EObject] = [] # EKeypath
    var eparams: list[EObject] = []
    var pending_mount_id: ?HTag = None

    _schema = schema.unsafe_get_shared_schema(shared_schema)

    #def write(node: Node, thandle: int, use_ikp: bool, result_cb: action(?Exception) -> None):
    def write(node: Node, schema_path: ?schema.SchemaPath, base_tags: list[(str, str)], timestamp: int, result_cb: action(TSDBWriter, ?Exception) -> None):
        cursor: schema.Cursor = schema.Cursor(_schema)
        if schema_path is not None:
            if not cursor.push_schema_path(schema_path):
                print("Invalid schema path:", schema_path)
                return

        path = []

        # Are we dealing with an RPC payload?
        rpc_parent = cursor.path()[-1]
        if rpc_parent.is_action():
            path.append("rpc")
            itag = cursor.lookup_itag(rpc_parent.tag)
            if itag is not None:
                path.append(itag.name)

        metrics = get_metrics_from_tree(node, cursor, timestamp, path, [base_tags])
        print("Metrics to write: ", metrics)
        #if len(metrics) > 0:
        #    print("First metric to write: ", metrics[0])
        #else:
        #    print("No metrics to write")

        def _on_response(c, success):
            pass
#            if success:
#                print("Metric send successful")
#            else:
#                print("Metric send failed")

        def _on_last_response(c, success, cb: action(TSDBWriter, ?Exception) -> None):
            pass
#            if success:
#                print("Metric final send successful")
#            else:
#                print("Metric final send failed")

            cb(self, None)

        print("About to iterate over metrics")
        _remaining_metrics = len(metrics)

        if _remaining_metrics == 0:
           result_cb(self, None)

        for metric in metrics:
            _remaining_metrics -= 1
            #print("Metric iteration")
            #print("Metric to write", metric)
            # XXX This is really a race condition, to fix later
            if _remaining_metrics > 0:
                m3c.send_metric(metric, _on_response)
            else:
                m3c.send_metric(metric, lambda c, s: _on_last_response(c, s, result_cb))

        #result_cb(self, None)

    def _reset():
        prefix_epath = []
        result_cb = None
        state = _STATE_IDLE
        work_stack = []
        #cursor = schema.Cursor(_schema)
        epath = []
        eparams = []
        pending_mount_id = None

    def _poll():
        print("writer: begin poll")
        while True:
            if state == _STATE_IDLE:
                print("writer:   STATE_IDLE")
                if write_tasks:
                    print("writer:     Setup write task")
                    #_setup_next_task()
                else:
                    print("writer:     No tasks")
                    break

