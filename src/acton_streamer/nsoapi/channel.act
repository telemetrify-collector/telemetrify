from acton_streamer.common.io import IncompleteReadError
from acton_streamer.nsoapi.proto import *
from acton_streamer.nsoapi.conf import *
from acton_streamer.common.utils import *

def read_response(reader: BufferReader, op: ?int, read_op: bool) -> ?value: # (ConfResponse | IncompleteReadError)
    result = ConfResponse(op if op is not None else -1, None, False, 0, None)
    retval: ?value = result
    _response_len = reader.read_i32_be()
    if isinstance(_response_len, int):
        response_len: int = _response_len
        #print("Recv cdb response len:", response_len)
        expected_len = response_len + 4
        e = reader.assert_unread_bytes(response_len)
        if isinstance(e, IncompleteReadError):
            return e
        e2 = __read_response_content(reader, read_op, result, expected_len)
        if e2 is not None:
            if isinstance(e2, IncompleteReadError):
                return e2
            retval = e2
        else:
            read_len = reader.read_bytes_count()
            if read_len != expected_len:
                print("WARNING: Inconsistent length of MAAPI response, expected:", expected_len, ", actual:", read_len)

    else:
        if isinstance(_response_len, IncompleteReadError):
            return _response_len
        retval = _response_len
    return retval

def __read_response_content(reader: BufferReader, read_op: bool, result, expected_len: int) -> ?value:
    if not read_op:
        return __read_response_term(reader, result)
    else:
        _res_op = reader.read_u32_be()
        if isinstance(_res_op, int):
            result.op = _res_op
            #if result.op & CDB_ERROR_FLAG_MASK != 0: # BUG: Runtime error on bitwise operations
            if (result.op // CDB_ERROR_FLAG_MASK) % 2 == 1:
                result.is_error = True
                _error_code = reader.read_i32_be()
                if isinstance(_error_code, int):
                    result.error_code = _error_code
                    _error_obj = EObject.decode_tagged(reader)
                    if isinstance(_error_obj, EObject):
                        if isinstance(_error_obj, EBinary):
                            #result.error_msg = str(_error_obj)
                            result.error_msg = str(_error_obj)
                        elif isinstance(_error_obj, ETuple):
                            # {String, AppTag} ?
                            if len(_error_obj.elems) >= 1:
                                e = _error_obj.elems[0]
                                if isinstance(e, EBinary):
                                    #result.error_msg = str(e)
                                    result.error_msg = str(e)
                        else:
                            result.error_msg = str(_error_obj)
                        return
                    else:
                        return _error_obj
                else:
                    return _error_code
            else:
                if reader.read_bytes_count() < expected_len:
                    return __read_response_term(reader, result)
                else:
                    return
        else:
            return _res_op
        return

def __read_response_term(reader: BufferReader, result: ConfResponse) -> ?value:
    # _response = EObject.decode_tagged(input_stream)
    _response = EObject.decode_tagged(reader)
    if isinstance(_response, EObject):
        result.term = _response
    else:
        return _response
