# Copyright (C) Deutsche Telekom AG
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

from telemetrify.common.mod import *
from telemetrify.common.utils import *
from telemetrify.nso.subscriber import Refiner, PassthroughRefiner, MirrorRefiner, SubscriptionSpec, SubscriptionIdentity, SUB_TYPE_RUNNING
from telemetrify.main.common import *

SOURCE_TYPE_TAG_NETCONF = PTag('tlm', 'netconf')
SOURCE_TYPE_TAG_VMANAGE_HTTP = PTag('tlm', 'vmanage-http')
SOURCE_TYPE_TAG_MOCK_NETCONF = PTag('tlm', 'mock-netconf')
SOURCE_TYPE_TAG_MOCK_VMANAGE_HTTP = PTag('tlm', 'mock-vmanage-http')

SUBSCRIPTION_TYPE_TAG_NETCONF_RPC_POLLER = PTag('tlm', 'netconf-rpc-poll')
SUBSCRIPTION_TYPE_TAG_NETCONF_GET_POLLER = PTag('tlm', 'netconf-get-poll')
SUBSCRIPTION_TYPE_TAG_VMANAGE_POLLER = PTag('tlm', 'vmanage-poll')

SUBSCRIPTION_TYPES = set([
        SUBSCRIPTION_TYPE_TAG_NETCONF_RPC_POLLER,
        SUBSCRIPTION_TYPE_TAG_NETCONF_GET_POLLER,
        SUBSCRIPTION_TYPE_TAG_VMANAGE_POLLER,
    ])

SINK_TYPE_TAG_M3DB = PTag('tlm', 'm3db')
SINK_TYPE_TAG_NSO_DP = PTag('tlm', 'nso-data-provider')
SINK_TYPE_TAG_NSO_CDB = PTag('tlm', 'nso-cdb')

def get_subscription_type(sub_source_node: TNode) -> ?Id:
    for child_id in sub_source_node.iter_ids():
        if child_id in SUBSCRIPTION_TYPES:
            return child_id
    return None

def get_subscription_source_ned_id(sub_source_node: TNode) -> ?HTag:
    return sub_source_node[PTag('tlm', 'schema')][PTag('tlm', 'ned-id')].try_htag()

def get_subscription_base_source_params(sub_source_node: TNode) -> TNode:
    source_params = tnode_root()
    metadata_node = sub_source_node[PTag('tlm', 'metadata')]
    source_label_node = metadata_node[SOURCE_PARAM_SOURCE_LABEL]
    if source_label_node:
        source_params.leaf(None, SOURCE_PARAM_SOURCE_LABEL, source_label_node.try_value())
    return source_params

class SourceRefiner(PassthroughRefiner):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        PassthroughRefiner.__init__(
            self,
            SubscriptionSpec(SubscriptionIdentity(Keypath([
                PTag('tlm', 'telemetrify'),
                PTag('tlm', 'source'),
                Key.wildcard()]),
                SUB_TYPE_RUNNING), True))

    @staticmethod
    def id() -> int:
        return 1002

class SinkRefiner(PassthroughRefiner):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        PassthroughRefiner.__init__(
            self,
            SubscriptionSpec(SubscriptionIdentity(Keypath([
                PTag('tlm', 'telemetrify'),
                PTag('tlm', 'sink'),
                Key.wildcard()
                ]),
            SUB_TYPE_RUNNING), True)
        )

    @staticmethod
    def id() -> int:
        return 1004

class SubscriptionSourceRefBaseRefiner(PassthroughRefiner):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        PassthroughRefiner.__init__(
            self,
            SubscriptionSpec(SubscriptionIdentity(Keypath([
                PTag('tlm', 'telemetrify'),
                PTag('tlm', 'subscription'),
                Key.wildcard(),
                PTag('tlm', 'source'),
                PTag('tlm', 'source-ref')]),
                SUB_TYPE_RUNNING), True)
            )

    @staticmethod
    def id() -> int:
        return 1006

class SubscriptionSourceRefRefiner(Refiner):
    @property
    subscription_source_refs: dict[Keypath, TNode]
    @property
    source_to_sub_keys: dict[Keypath, set[Keypath]]

    def __init__(self):
        Refiner.__init__(
            self,
            [],
            [
                SubscriptionSourceRefBaseRefiner.id(),
                SourceRefiner.id()
            ])

        self.subscription_source_refs = {}
        self.source_to_sub_keys = {}

    @staticmethod
    def id() -> int:
        return 1011

    def update(self, root: TNode, input_subs: dict[SubscriptionIdentity, list[Keypath]], input_refiners: dict[int, (Refiner, list[Keypath])]) -> list[Keypath]:
        sub_refiner, sub_keys = input_refiners[SubscriptionSourceRefBaseRefiner.id()]
        _source_refiner, source_keys = input_refiners[SourceRefiner.id()]

        updated: set[Keypath] = set(sub_keys)

        for source_key in source_keys:
            _sub_keys = try_get(self.source_to_sub_keys, source_key)
            if _sub_keys is not None:
                set_update(updated, _sub_keys)

        for sub_key in updated:
            subscription_source_ref_node = root[PTag('tlm', 'telemetrify')][PTag('tlm', 'subscription')][sub_key[0]][PTag('tlm', 'source')][PTag('tlm', 'source-ref')]
            if subscription_source_ref_node:
                self.subscription_source_refs[sub_key] = subscription_source_ref_node
                source_ref = subscription_source_ref_node[PTag('tlm', 'source-ref')].try_str()
                if source_ref is not None:
                    source_key = Keypath([Key([source_ref])])
                    dict_set_add(self.source_to_sub_keys, source_key, sub_key)
            else:
                old_subscription_source_ref_node = try_pop(self.subscription_source_refs, sub_key)
                if old_subscription_source_ref_node is not None:
                    source_ref = old_subscription_source_ref_node.try_str()
                    if source_ref is not None:
                        source_key = Keypath([Key([source_ref])])
                        dict_set_discard(self.source_to_sub_keys, source_key, sub_key)

        return list(iter(updated))

    def state(self, keys: Keypath) -> ?value:
        return try_get(self.subscription_source_refs, keys)

class SubscriptionRefiner(MirrorRefiner):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        MirrorRefiner.__init__(self,
            [
                SubscriptionSpec(SubscriptionIdentity(Keypath([
                    PTag('tlm', 'telemetrify'),
                    PTag('tlm', 'subscription'),
                    Key.wildcard(),
                    PTag('tlm', 'source'),
                    PTag('tlm', 'netconf-rpc-poll')]),
                    SUB_TYPE_RUNNING), True),
                SubscriptionSpec(SubscriptionIdentity(Keypath([
                    PTag('tlm', 'telemetrify'),
                    PTag('tlm', 'subscription'),
                    Key.wildcard(),
                    PTag('tlm', 'source'),
                    PTag('tlm', 'netconf-get-poll')]),
                    SUB_TYPE_RUNNING), True),
                SubscriptionSpec(SubscriptionIdentity(Keypath([
                    PTag('tlm', 'telemetrify'),
                    PTag('tlm', 'subscription'),
                    Key.wildcard(),
                    PTag('tlm', 'source'),
                    PTag('tlm', 'vmanage-poll')]),
                    SUB_TYPE_RUNNING), True),
                SubscriptionSpec(SubscriptionIdentity(Keypath([
                    PTag('tlm', 'telemetrify'),
                    PTag('tlm', 'subscription'),
                    Key.wildcard(),
                    PTag('tlm', 'source'),
                    PTag('tlm', 'schema')]),
                    SUB_TYPE_RUNNING), True),
                SubscriptionSpec(SubscriptionIdentity(Keypath([
                    PTag('tlm', 'telemetrify'),
                    PTag('tlm', 'subscription'),
                    Key.wildcard(),
                    PTag('tlm', 'source'),
                    PTag('tlm', 'metadata')]),
                    SUB_TYPE_RUNNING), True),
            ],
            Keypath([
                PTag('tlm', 'telemetrify'),
                PTag('tlm', 'subscription'),
                Key.wildcard(),
                PTag('tlm', 'source')]))

    @staticmethod
    def id() -> int:
        return 1012

class SubscriptionTypeRefiner(Refiner):
    @property
    sub_to_sub_type: dict[Keypath, Id]

    def __init__(self):
        Refiner.__init__(
            self,
            [],
            [
                SubscriptionRefiner.id(),
            ])

        self.sub_to_sub_type = {}

    @staticmethod
    def id() -> int:
        return 1013

    def update(self, root: TNode, input_subs: dict[SubscriptionIdentity, list[Keypath]], input_refiners: dict[int, (Refiner, list[Keypath])]) -> list[Keypath]:
        sub_refiner, sub_keys = input_refiners[SubscriptionRefiner.id()]

        updated: set[Keypath] = set(None)

        for sub_key in sub_keys:
            sub_config = sub_refiner.state(sub_key)
            if sub_config is not None and isinstance(sub_config, TNode):
                new_sub_type = get_subscription_type(sub_config)
                if not eq_optional(new_sub_type, try_get(self.sub_to_sub_type, sub_key)):
                    if new_sub_type is not None:
                        self.sub_to_sub_type[sub_key] = new_sub_type
                    else:
                        try_pop(self.sub_to_sub_type, sub_key)
                    updated.add(sub_key)
            else:
                old_sub_type = try_pop(self.sub_to_sub_type, sub_key)
                if old_sub_type is not None:
                    updated.add(sub_key)

        return list(iter(updated))

    def state(self, keys: Keypath) -> ?value:
        return try_get(self.sub_to_sub_type, keys)

class SubscriptionSinkBaseRefiner(PassthroughRefiner):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        PassthroughRefiner.__init__(
            self,
            SubscriptionSpec(SubscriptionIdentity(Keypath([
                PTag('tlm', 'telemetrify'),
                PTag('tlm', 'subscription'),
                Key.wildcard(),
                PTag('tlm', 'sink'),
                Key.wildcard()
                ]),
                SUB_TYPE_RUNNING), True)
            )

    @staticmethod
    def id() -> int:
        return 1008

class SubscriptionSinkRefiner(Refiner):
    @property
    subscription_sink_configs: dict[Keypath, TNode]
    @property
    sink_to_sub_sink_keys: dict[Keypath, set[Keypath]]

    def __init__(self):
        Refiner.__init__(
            self,
            [],
            [
                SubscriptionSinkBaseRefiner.id(),
                SinkRefiner.id(),
                SubscriptionTypeRefiner.id(),
            ])

        self.subscription_sink_configs = {}
        self.sink_to_sub_sink_keys = {}

    @staticmethod
    def id() -> int:
        return 1014

    def update(self, root: TNode, input_subs: dict[SubscriptionIdentity, list[Keypath]], input_refiners: dict[int, (Refiner, list[Keypath])]) -> list[Keypath]:
        sub_sink_refiner, sub_sink_keys = input_refiners[SubscriptionSinkBaseRefiner.id()]
        _sink_refiner, sink_keys = input_refiners[SinkRefiner.id()]
        sub_type_refiner, sub_type_keys = input_refiners[SubscriptionTypeRefiner.id()]

        updated: set[Keypath] = set(sub_sink_keys)

        # If subscription-type changed, update all sub sink elements
        for sub_type_key in sub_type_keys:
            sub_type = sub_type_refiner.state(sub_type_key)
            if sub_type is not None and isinstance(sub_type, Id):
                subscription_sink_list = root[PTag('tlm', 'telemetrify')][PTag('tlm', 'subscription')][sub_type_key[0]][PTag('tlm', 'sink')]
                for sink_key_0 in subscription_sink_list.iter_ids():
                    updated.add(sub_type_key + Keypath([sink_key_0]))

        for sink_key in sink_keys:
            _sub_sink_keys = try_get(self.sink_to_sub_sink_keys, sink_key)
            if _sub_sink_keys is not None:
                set_update(updated, _sub_sink_keys)

        for sub_sink_key in updated:
            sub_key = sub_sink_key.try_slice(0, 1)
            sink_key = sub_sink_key.try_slice(1, 2)
            if sub_key is not None and sink_key is not None:
                subscription_sink_node = root[PTag('tlm', 'telemetrify')][PTag('tlm', 'subscription')][sub_key[0]][PTag('tlm', 'sink')][sink_key[0]]
                if subscription_sink_node:
                    self.subscription_sink_configs[sub_sink_key] = subscription_sink_node
                    dict_set_add(self.sink_to_sub_sink_keys, sink_key, sub_sink_key)
                else:
                    try_pop(self.subscription_sink_configs, sub_sink_key)
                    dict_set_discard(self.sink_to_sub_sink_keys, sink_key, sub_sink_key)

        return list(iter(updated))

    def state(self, keys: Keypath) -> ?value:
        return try_get(self.subscription_sink_configs, keys)

class LoggingLevelRefiner(PassthroughRefiner):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        PassthroughRefiner.__init__(
            self,
            SubscriptionSpec(SubscriptionIdentity(Keypath([
                PTag('tlm', 'telemetrify'),
                PTag('tlm', 'logging'),
                PTag('tlm', 'level')
                ]),
            SUB_TYPE_RUNNING), True)
        )

    @staticmethod
    def id() -> int:
        return 1101
