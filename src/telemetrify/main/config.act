# Copyright (C) Deutsche Telekom AG
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import logging

from telemetrify.common.mod import *
from telemetrify.common.utils import *
from telemetrify.nso.subscriber import Refiner, PassthroughRefiner, MirrorRefiner, SubscriptionSpec, SubscriptionIdentity, SUB_TYPE_RUNNING
from telemetrify.main.common import *

SOURCE_TYPE_TAG_NETCONF = PTag('tlm', 'netconf')
SOURCE_TYPE_TAG_VMANAGE_HTTP = PTag('tlm', 'vmanage-http')
SOURCE_TYPE_TAG_MOCK_NETCONF = PTag('tlm', 'mock-netconf')
SOURCE_TYPE_TAG_MOCK_VMANAGE_HTTP = PTag('tlm', 'mock-vmanage-http')

SUBSCRIPTION_TYPE_TAG_NETCONF_RPC_POLLER = PTag('tlm', 'netconf-rpc-poll')
SUBSCRIPTION_TYPE_TAG_NETCONF_GET_POLLER = PTag('tlm', 'netconf-get-poll')
SUBSCRIPTION_TYPE_TAG_VMANAGE_POLLER = PTag('tlm', 'vmanage-poll')

SUBSCRIPTION_TYPES = set([
        SUBSCRIPTION_TYPE_TAG_NETCONF_RPC_POLLER,
        SUBSCRIPTION_TYPE_TAG_NETCONF_GET_POLLER,
        SUBSCRIPTION_TYPE_TAG_VMANAGE_POLLER,
    ])

OUTPUT_TYPE_TAG_TRANSFORM_REF = PTag('tlm', 'transform-ref')
OUTPUT_TYPE_TAG_SINK_REF = PTag('tlm', 'sink-ref')

SINK_TYPE_TAG_M3DB = PTag('tlm', 'm3db')
SINK_TYPE_TAG_NSO_DP = PTag('tlm', 'nso-data-provider')
SINK_TYPE_TAG_NSO_CDB = PTag('tlm', 'nso-cdb')
SINK_TYPE_TAG_MOCK = PTag('tlm', 'mock')

def get_subscription_type(sub_source_node: TNode) -> ?Id:
    for child_id in sub_source_node.iter_ids():
        if child_id in SUBSCRIPTION_TYPES:
            return child_id
    return None

def get_subscription_source_ned_id(sub_source_node: TNode) -> ?HTag:
    return sub_source_node[PTag('tlm', 'schema')][PTag('tlm', 'ned-id')].try_htag()

def get_subscription_base_flow_params(sub_source_node: TNode) -> TNode:
    flow_params = tnode_root()
    flow_params.tree(None, FLOW_PARAM_INTERNAL_TAGS).merge(sub_source_node[FLOW_PARAM_INTERNAL_TAGS])
    return flow_params

def get_log_level(log_level_leaf: TNode) -> ?int:
    _val = log_level_leaf.try_str()
    if _val is not None:
        if _val == 'off':
            return logging.OFF
        elif _val == 'emergency':
            return logging.EMERGENCY
        elif _val == 'alert':
            return logging.ALERT
        elif _val == 'critical':
            return logging.CRITICAL
        elif _val == 'error':
            return logging.ERR
        elif _val == 'warning':
            return logging.WARNING
        elif _val == 'info':
            return logging.INFO
        elif _val == 'notice':
            return logging.NOTICE
        elif _val == 'debug':
            return logging.DEBUG
        elif _val == 'verbose':
            return logging.VERBOSE
        elif _val == 'trace':
            return logging.TRACE
        elif _val == 'all':
            return logging.ALL
        else:
            raise Exception("Unimplemented logging level value: " + str(_val))
    return None

class OutputCollectionRefinerBase(Refiner):
    @property
    collection_output_configs: dict[Keypath, TNode]
    @property
    output_to_collection_output_ref_keys: dict[Keypath, set[Keypath]]
    @property
    output_ref_refiner_id: int
    @property
    output_refiner_id: int
    @property
    collection_refiner_id: int
    @property
    get_output_list: (TNode, Keypath) -> TNode

    def __init__(self,
                output_ref_refiner_id: int,
                output_refiner_id: int,
                collection_refiner_id: int,
                get_output_list: (TNode, Keypath) -> TNode):

        Refiner.__init__(
            self,
            [],
            [
                output_ref_refiner_id,
                output_refiner_id,
                collection_refiner_id,
            ])

        self.collection_output_configs = {}
        self.output_to_collection_output_ref_keys = {}

        self.output_ref_refiner_id = output_ref_refiner_id
        self.output_refiner_id = output_refiner_id
        self.collection_refiner_id = collection_refiner_id
        self.get_output_list = get_output_list

    def update(self, root: TNode, input_subs: dict[SubscriptionIdentity, list[Keypath]], input_refiners: dict[int, (Refiner, list[Keypath])]) -> list[Keypath]:
        collection_output_ref_refiner, collection_output_ref_keys = input_refiners[self.output_ref_refiner_id]
        _output_refiner, output_keys = input_refiners[self.output_refiner_id]
        collection_refiner, collection_keys = input_refiners[self.collection_refiner_id]

        updated: set[Keypath] = set(None)

        # Updated output ref keys
        for collection_output_ref_key in collection_output_ref_keys:
            updated.add(collection_output_ref_key)

        # If full reload triggered
        for collection_key in collection_keys:
            state = collection_refiner.state(collection_key)
            if state is not None:
                output_list = self.get_output_list(root, collection_key)
                for output_key in output_list.iter_ids():
                    updated.add(collection_key + Keypath([output_key]))

        # If output updated, update all dependent output collections
        for output_key in output_keys:
            _collection_keys = try_get(self.output_to_collection_output_ref_keys, output_key)
            if _collection_keys is not None:
                set_update(updated, _collection_keys)

        for collection_output_ref_key in updated:
            collection_key = collection_output_ref_key.try_slice(0, 1)
            output_key = collection_output_ref_key.try_slice(1, 2)
            if collection_key is not None and output_key is not None:
                collection_output_ref_node = collection_output_ref_refiner.state(collection_output_ref_key)
                if collection_output_ref_node is not None and isinstance(collection_output_ref_node, TNode):
                    self.collection_output_configs[collection_output_ref_key] = collection_output_ref_node
                    dict_set_add(self.output_to_collection_output_ref_keys, output_key, collection_output_ref_key)
                else:
                    try_pop(self.collection_output_configs, collection_output_ref_key)
                    dict_set_discard(self.output_to_collection_output_ref_keys, output_key, collection_output_ref_key)

        return list(iter(updated))

    def state(self, keys: Keypath) -> ?value:
        return try_get(self.collection_output_configs, keys)

class SourceRefiner(PassthroughRefiner):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        PassthroughRefiner.__init__(
            self,
            SubscriptionSpec(SubscriptionIdentity(Keypath([
                PTag('tlm', 'telemetrify'),
                PTag('tlm', 'source'),
                Key.wildcard()]),
                SUB_TYPE_RUNNING), True))

    @staticmethod
    def id() -> int:
        return 1002

class SinkRefiner(PassthroughRefiner):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        PassthroughRefiner.__init__(
            self,
            SubscriptionSpec(SubscriptionIdentity(Keypath([
                PTag('tlm', 'telemetrify'),
                PTag('tlm', 'sink'),
                Key.wildcard()
                ]),
            SUB_TYPE_RUNNING), True)
        )

    @staticmethod
    def id() -> int:
        return 1004

class SubscriptionSourceRefBaseRefiner(PassthroughRefiner):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        PassthroughRefiner.__init__(
            self,
            SubscriptionSpec(SubscriptionIdentity(Keypath([
                PTag('tlm', 'telemetrify'),
                PTag('tlm', 'subscription'),
                Key.wildcard(),
                PTag('tlm', 'source'),
                PTag('tlm', 'source-ref')]),
                SUB_TYPE_RUNNING), True)
            )

    @staticmethod
    def id() -> int:
        return 1006

class SubscriptionSourceRefRefiner(Refiner):
    @property
    subscription_source_refs: dict[Keypath, TNode]
    @property
    source_to_sub_keys: dict[Keypath, set[Keypath]]

    def __init__(self):
        Refiner.__init__(
            self,
            [],
            [
                SubscriptionSourceRefBaseRefiner.id(),
                SourceRefiner.id()
            ])

        self.subscription_source_refs = {}
        self.source_to_sub_keys = {}

    @staticmethod
    def id() -> int:
        return 1011

    def update(self, root: TNode, input_subs: dict[SubscriptionIdentity, list[Keypath]], input_refiners: dict[int, (Refiner, list[Keypath])]) -> list[Keypath]:
        sub_refiner, sub_keys = input_refiners[SubscriptionSourceRefBaseRefiner.id()]
        _source_refiner, source_keys = input_refiners[SourceRefiner.id()]

        updated: set[Keypath] = set(sub_keys)

        for source_key in source_keys:
            _sub_keys = try_get(self.source_to_sub_keys, source_key)
            if _sub_keys is not None:
                set_update(updated, _sub_keys)

        for sub_key in updated:
            subscription_source_ref_node = root[PTag('tlm', 'telemetrify')][PTag('tlm', 'subscription')][sub_key[0]][PTag('tlm', 'source')][PTag('tlm', 'source-ref')]
            if subscription_source_ref_node:
                self.subscription_source_refs[sub_key] = subscription_source_ref_node
                source_ref = subscription_source_ref_node[PTag('tlm', 'source-ref')].try_str()
                if source_ref is not None:
                    source_key = Keypath([Key([source_ref])])
                    dict_set_add(self.source_to_sub_keys, source_key, sub_key)
            else:
                old_subscription_source_ref_node = try_pop(self.subscription_source_refs, sub_key)
                if old_subscription_source_ref_node is not None:
                    source_ref = old_subscription_source_ref_node.try_str()
                    if source_ref is not None:
                        source_key = Keypath([Key([source_ref])])
                        dict_set_discard(self.source_to_sub_keys, source_key, sub_key)

        return list(iter(updated))

    def state(self, keys: Keypath) -> ?value:
        return try_get(self.subscription_source_refs, keys)

class SubscriptionRefiner(MirrorRefiner):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        MirrorRefiner.__init__(self,
            [
                SubscriptionSpec(SubscriptionIdentity(Keypath([
                    PTag('tlm', 'telemetrify'),
                    PTag('tlm', 'subscription'),
                    Key.wildcard(),
                    PTag('tlm', 'source'),
                    PTag('tlm', 'netconf-rpc-poll')]),
                    SUB_TYPE_RUNNING), True),
                SubscriptionSpec(SubscriptionIdentity(Keypath([
                    PTag('tlm', 'telemetrify'),
                    PTag('tlm', 'subscription'),
                    Key.wildcard(),
                    PTag('tlm', 'source'),
                    PTag('tlm', 'netconf-get-poll')]),
                    SUB_TYPE_RUNNING), True),
                SubscriptionSpec(SubscriptionIdentity(Keypath([
                    PTag('tlm', 'telemetrify'),
                    PTag('tlm', 'subscription'),
                    Key.wildcard(),
                    PTag('tlm', 'source'),
                    PTag('tlm', 'vmanage-poll')]),
                    SUB_TYPE_RUNNING), True),
                SubscriptionSpec(SubscriptionIdentity(Keypath([
                    PTag('tlm', 'telemetrify'),
                    PTag('tlm', 'subscription'),
                    Key.wildcard(),
                    PTag('tlm', 'source'),
                    PTag('tlm', 'schema')]),
                    SUB_TYPE_RUNNING), True),
            ],
            Keypath([
                PTag('tlm', 'telemetrify'),
                PTag('tlm', 'subscription'),
                Key.wildcard(),
                PTag('tlm', 'source')]))

    @staticmethod
    def id() -> int:
        return 1012

class SubscriptionTypeRefiner(Refiner):
    @property
    sub_to_sub_type: dict[Keypath, Id]

    def __init__(self):
        Refiner.__init__(
            self,
            [],
            [
                SubscriptionRefiner.id(),
            ])

        self.sub_to_sub_type = {}

    @staticmethod
    def id() -> int:
        return 1013

    def update(self, root: TNode, input_subs: dict[SubscriptionIdentity, list[Keypath]], input_refiners: dict[int, (Refiner, list[Keypath])]) -> list[Keypath]:
        sub_refiner, sub_keys = input_refiners[SubscriptionRefiner.id()]

        updated: set[Keypath] = set(None)

        for sub_key in sub_keys:
            sub_config = sub_refiner.state(sub_key)
            if sub_config is not None and isinstance(sub_config, TNode):
                new_sub_type = get_subscription_type(sub_config)
                if not eq_optional(new_sub_type, try_get(self.sub_to_sub_type, sub_key)):
                    if new_sub_type is not None:
                        self.sub_to_sub_type[sub_key] = new_sub_type
                    else:
                        try_pop(self.sub_to_sub_type, sub_key)
                    updated.add(sub_key)
            else:
                old_sub_type = try_pop(self.sub_to_sub_type, sub_key)
                if old_sub_type is not None:
                    updated.add(sub_key)

        return list(iter(updated))

    def state(self, keys: Keypath) -> ?value:
        return try_get(self.sub_to_sub_type, keys)

class SubscriptionOutputTransformBaseRefiner(PassthroughRefiner):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598

        PassthroughRefiner.__init__(
            self,
            SubscriptionSpec(SubscriptionIdentity(Keypath([
                PTag('tlm', 'telemetrify'),
                PTag('tlm', 'subscription'),
                Key.wildcard(),
                PTag('tlm', 'output'),
                PTag('tlm', 'transform'),
                Key.wildcard()
                ]),
                SUB_TYPE_RUNNING), True)
            )

    @staticmethod
    def id() -> int:
        return 1008

class SubscriptionOutputSinkBaseRefiner(PassthroughRefiner):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598

        PassthroughRefiner.__init__(
            self,
            SubscriptionSpec(SubscriptionIdentity(Keypath([
                PTag('tlm', 'telemetrify'),
                PTag('tlm', 'subscription'),
                Key.wildcard(),
                PTag('tlm', 'output'),
                PTag('tlm', 'sink'),
                Key.wildcard()
                ]),
                SUB_TYPE_RUNNING), True)
            )

    @staticmethod
    def id() -> int:
        return 1009

class SubscriptionOutputTransformRefiner(OutputCollectionRefinerBase):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        OutputCollectionRefinerBase.__init__(self,
            SubscriptionOutputTransformBaseRefiner.id(),
            TransformTypeRefiner.id(),
            SubscriptionTypeRefiner.id(),
            lambda r, kp: r[PTag('tlm', 'telemetrify')][PTag('tlm', 'subscription')][kp[0]][PTag('tlm', 'output')][PTag('tlm', 'transform')])

    @staticmethod
    def id() -> int:
        return 1015

class SubscriptionOutputSinkRefiner(OutputCollectionRefinerBase):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        OutputCollectionRefinerBase.__init__(self,
            SubscriptionOutputSinkBaseRefiner.id(),
            SinkRefiner.id(),
            SubscriptionTypeRefiner.id(),
            lambda r, kp: r[PTag('tlm', 'telemetrify')][PTag('tlm', 'subscription')][kp[0]][PTag('tlm', 'output')][PTag('tlm', 'sink')])

    @staticmethod
    def id() -> int:
        return 1016

class TransformTypeRefiner(PassthroughRefiner):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        PassthroughRefiner.__init__(
            self,
            SubscriptionSpec(SubscriptionIdentity(Keypath([
                PTag('tlm', 'telemetrify'),
                PTag('tlm', 'transform'),
                Key.wildcard(),
                PTag('tlm', 'type'),
                ]),
            SUB_TYPE_RUNNING), True)
        )

    @staticmethod
    def id() -> int:
        return 1020

class TransformOutputTransformBaseRefiner(PassthroughRefiner):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        PassthroughRefiner.__init__(
            self,
            SubscriptionSpec(SubscriptionIdentity(Keypath([
                PTag('tlm', 'telemetrify'),
                PTag('tlm', 'transform'),
                Key.wildcard(),
                PTag('tlm', 'output'),
                PTag('tlm', 'transform'),
                Key.wildcard(),
                ]),
            SUB_TYPE_RUNNING), True)
        )

    @staticmethod
    def id() -> int:
        return 1021

class TransformOutputSinkBaseRefiner(PassthroughRefiner):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        PassthroughRefiner.__init__(
            self,
            SubscriptionSpec(SubscriptionIdentity(Keypath([
                PTag('tlm', 'telemetrify'),
                PTag('tlm', 'transform'),
                Key.wildcard(),
                PTag('tlm', 'output'),
                PTag('tlm', 'sink'),
                Key.wildcard(),
                ]),
            SUB_TYPE_RUNNING), True)
        )

    @staticmethod
    def id() -> int:
        return 1022

class TransformOutputTransformRefiner(OutputCollectionRefinerBase):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        OutputCollectionRefinerBase.__init__(self,
            TransformOutputTransformBaseRefiner.id(),
            TransformTypeRefiner.id(),
            TransformTypeRefiner.id(),
            lambda r, kp: r[PTag('tlm', 'telemetrify')][PTag('tlm', 'transform')][kp[0]][PTag('tlm', 'output')][PTag('tlm', 'transform')])

    @staticmethod
    def id() -> int:
        return 1025

class TransformOutputSinkRefiner(OutputCollectionRefinerBase):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        OutputCollectionRefinerBase.__init__(self,
            TransformOutputSinkBaseRefiner.id(),
            SinkRefiner.id(),
            TransformTypeRefiner.id(),
            lambda r, kp: r[PTag('tlm', 'telemetrify')][PTag('tlm', 'transform')][kp[0]][PTag('tlm', 'output')][PTag('tlm', 'sink')])

    @staticmethod
    def id() -> int:
        return 1026

class LoggingLevelRefiner(PassthroughRefiner):
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(self):
        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        PassthroughRefiner.__init__(
            self,
            SubscriptionSpec(SubscriptionIdentity(Keypath([
                PTag('tlm', 'telemetrify'),
                PTag('tlm', 'logging'),
                PTag('tlm', 'level')
                ]),
            SUB_TYPE_RUNNING), True)
        )

    @staticmethod
    def id() -> int:
        return 1101
