# Copyright (C) Deutsche Telekom AG
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import logging

import telemetrify.common.utils as utils

from telemetrify.common.mod import *
from telemetrify.common.utils import *

def tnode_empty() -> TNode:
    return TNode(OP_NONE, PTag.root())

def tnode_root() -> TNode:
    return TTree(OP_NONE, PTag.root(), None, {})

SOURCE_PARAM_TIMESTAMP = PTag(None, 'timestamp')
SOURCE_PARAM_SCHEMA_PATH = PTag(None, 'schema_path')
SOURCE_PARAM_BASE_TAGS = PTag(None, 'base_tags')
SOURCE_PARAM_RESET = PTag(None, 'reset')
SOURCE_PARAM_SOURCE_LABEL = PTag('tlm', 'source-label')

# STATE_NONE = 0
STATE_STOPPED = 1 # valid target-/externally-visible- state
STATE_STARTING = 2 # internal transition only, i.e. not a valid target-state
STATE_RUNNING = 3 # valid target-/externally-visible- state
STATE_RESTARTING = 5 # internal transition only, i.e. not a valid target-state
STATE_STOPPING = 6 # internal transition only, i.e. not a valid target-state
STATE_CLOSING = 8 # internal transition only, i.e. not a valid target-state
STATE_CLOSED = 9 # valid target-/externally-visible- state

def state_str(state: int) -> str:
    # if state == STATE_NONE:
    #     return "NONE"
    if state == STATE_STOPPED:
        return "STOPPED"
    elif state == STATE_STARTING:
        return "STARTING"
    elif state == STATE_RUNNING:
        return "RUNNING"
    elif state == STATE_RESTARTING:
        return "RESTARTING"
    if state == STATE_STOPPING:
        return "STOPPING"
    elif state == STATE_CLOSING:
        return "CLOSING"
    elif state == STATE_CLOSED:
        return "CLOSED"
    raise ValueError("Unknown state value: " + str(state))

INVALID_UID = -1

# protocol ServerProxy:
#     uid: pure() -> int
#     attach: action(int, action(int) -> None) -> None
#     detach: action(int) -> None

class ServerProxyBase(object):
    @property
    _uid: int
    @property
    attach_fn: action(int, action(int, int) -> None) -> None
    @property
    detach_fn: action(int) -> None
    @property
    close_fn: action() -> None

    def __init__(
            self,
            uid: int,
            attach_fn: action(int, action(int, int) -> None) -> None,
            detach_fn: action(int) -> None,
            close_fn: action() -> None):

        self._uid = uid
        self.attach_fn = attach_fn
        self.detach_fn = detach_fn
        self.close_fn = close_fn

    # extension ServerProxyBase(ServerProxy):
    def uid(self):
        return self._uid

    proc def attach(self, uid: int, state_cb: action(int, int) -> None):
        self.attach_fn(uid, state_cb)

    proc def detach(self, uid: int):
        self.detach_fn(uid)

    proc def close(self):
        self.close_fn()

class ServerMixin(object):
    @property
    uid: int
    @property
    state: int
    @property
    clients: dict[int, action(int, int) -> None]
    @property
    on_closed: proc() -> None

    def __init__(self, uid: int, on_closed: proc() -> None):
        self.uid = uid
        self.state = STATE_STOPPED
        self.clients = {}
        self.on_closed = on_closed

    def attach(self, uid: int, state_cb: action(int, int) -> None):
        self.clients[uid] = state_cb
        state_cb(self.uid, self.state)

    def detach(self, uid: int):
        try_pop(self.clients, uid)
        if self.state == STATE_CLOSING:
            self._check_close()

    def on_started(self):
        if self.state not in [STATE_RUNNING, STATE_CLOSING, STATE_CLOSED]:
            self.state = STATE_RUNNING
            self._notify_clients()

    def on_stopped(self):
        if self.state == STATE_RUNNING:
            self.state = STATE_STOPPED
            self._notify_clients()
        elif self.state == STATE_CLOSING:
            self._check_close()

    def on_closing(self):
        self.state = STATE_CLOSING
        self._notify_clients()
        self._check_close()

    def _check_close(self):
        if len(self.clients) == 0:
            self.state = STATE_CLOSED
            self.on_closed()

    def _notify_clients(self):
        for state_cb in self.clients.values():
            state_cb(self.uid, self.state)

#
# Sink
#

class Sink(ServerProxyBase):
    @property
    write_fn: action(Node, TNode, TNode, ?action() -> None) -> None

    def __init__(
            self,
            uid: int,
            attach_fn: action(int, action(int, int) -> None) -> None,
            detach_fn: action(int) -> None,
            close_fn: action() -> None,
            write_fn: action(Node, TNode, TNode, ?action() -> None) -> None):

        ServerProxyBase.__init__(self, uid, attach_fn, detach_fn, close_fn)
        self.write_fn = write_fn

    def write(self, node: Node, source_params: TNode, sink_config: TNode, done_cb: ?action() -> None) -> None:
        self.write_fn(node, source_params, sink_config, done_cb)

    def close(self):
        self.close_fn()

#
# Source
#

class Source(ServerProxyBase):
    # @property
    # update_config_fn: action(TNode) -> None
    @property
    _workaround_actonc_issue_1598: bool

    def __init__(
            self,
            uid: int,
            attach_fn: action(int, action(int, int) -> None) -> None,
            detach_fn: action(int) -> None,
            close_fn: action() -> None):
            #update_config_fn: action(TNode) -> None):

        self._workaround_actonc_issue_1598 = True # https://github.com/actonlang/acton/issues/1598
        ServerProxyBase.__init__(self, uid, attach_fn, detach_fn, close_fn)
        #self.update_config_fn = update_config_fn

    # def update_config(self, source_update: TNode):
    #     self.update_config_fn(source_update)

#
# Subscriber
#

class Subscriber(object):
    @property
    update_config_fn: action(SubscriberUpdate) -> None
    @property
    close_fn: action() -> None

    def __init__(
            self,
            update_config_fn: action(SubscriberUpdate) -> None,
            close_fn: action() -> None):

        self.update_config_fn = update_config_fn
        self.close_fn = close_fn

    def update_config(self, update: SubscriberUpdate):
        self.update_config_fn(update)

    def close(self):
        self.close_fn()

class SubscriberMixin(object):
    @property
    source_mixin: SubscriberSourceMixin
    @property
    sinks_mixin: SubscriberSinksMixin
    @property
    state: int
    @property
    _start_fn: proc() -> None
    @property
    _stop_fn: proc() -> None
    @property
    _update_sub_config_fn: proc(TNode) -> None
    @property
    on_closed_fn: proc() -> None
    @property
    log: logging.Logger

    def __init__(self,
            uid: int,
            start: proc() -> None,
            stop: proc() -> None,
            update_sub_config: proc(TNode) -> None,
            on_source_state_trampoline: action(int, int) -> None,
            resync_source: proc() -> None,
            write_reset: proc(action(Node, TNode) -> None) -> None,
            on_write_reset_done_trampoline: action(int) -> None,
            on_closed: proc() -> None,
            log: logging.Logger):

        self.source_mixin = SubscriberSourceMixin(
            uid,
            self._on_source_start,
            self._on_source_stopping,
            on_source_state_trampoline)

        self.sinks_mixin = SubscriberSinksMixin(
            uid,
            resync_source,
            write_reset,
            on_write_reset_done_trampoline,
            self._on_sinks_reset,
            self._on_sinks_quiescent)

        self.state = STATE_STOPPED

        self._start_fn = start
        self._stop_fn = stop
        self._update_sub_config = update_sub_config

        self.on_closed_fn = on_closed

        self.log = log

    def get_source(self) -> ?Source:
        return self.source_mixin.get_source()

    def write(self, node: Node, source_params: TNode) -> None:
        self.sinks_mixin.write(node, source_params)

    def update_config(self, update: SubscriberUpdate):
        if self._update_config_requires_restart(update):
            self._stop()
        self._update_config(update)

    def _update_config_requires_restart(self, update: SubscriberUpdate):
        _update_source = update.source
        if _update_source is not None:
            return True
        _update_config = update.config
        if _update_config is not None:
            return True

        return False

    def _update_config(self, update: SubscriberUpdate):
        self.log.trace("_update_config", {"update": update})

        if self.state in [STATE_CLOSING, STATE_CLOSED]:
            raise ValueError("Attempted config update to closing/closed subscriber")

        _config = update.config
        if _config is not None:
            self._update_sub_config_fn(_config)

        _source = update.source
        if _source is not None:
            self.source_mixin.update_source(_source)

        _sinks = update.sinks
        if _sinks:
            self.sinks_mixin.update(_sinks)

    def _check_state(self):
        if self.log.output_level >= logging.TRACE:
            self.log.trace("_check_state", {
                "state": state_str(self.state),
                "source_state": state_str(self.source_mixin.source_state),
                "sinks_reset": self.sinks_mixin.is_reset(),
                "sinks_quiescent": self.sinks_mixin.is_quiescent()})

        if self.state == STATE_STOPPED:
            if self.source_mixin.source_state == STATE_RUNNING and self.sinks_mixin.is_reset():
                self._start()
        elif self.state == STATE_RUNNING:
            if self.source_mixin.source_state != STATE_RUNNING:
                self._stop()
        elif self.state == STATE_CLOSING:
            if self.sinks_mixin.is_quiescent():
                self.state = STATE_CLOSED
                self.source_mixin.close()
                self.on_closed_fn()

    def on_started(self):
        if self.log.output_level >= logging.TRACE:
            self.log.trace("on_started", None)
        if self.state in [STATE_CLOSING, STATE_CLOSED]:
            self._stop()
        else:
            self.state = STATE_RUNNING
            self.source_mixin.on_started()
            self._check_state()

    def on_stopped(self):
        if self.log.output_level >= logging.TRACE:
            self.log.trace("on_stopped", None)
        if self.state not in [STATE_CLOSING, STATE_CLOSED]:
            self.state = STATE_STOPPED
            self.source_mixin.on_stopped()
        self._check_state()

    def on_source_state(self, source_uid: int, source_state: int):
        if self.log.output_level >= logging.TRACE:
            self.log.trace("on_source_state", {"source_uid": source_uid, "source_state": state_str(source_state)})
        self.source_mixin.on_source_state(source_uid, source_state)

    def on_write_reset_done(self, sub_sink_uid: int):
        if self.log.output_level >= logging.TRACE:
            self.log.trace("on_write_reset_done", {"sub_sink_uid": sub_sink_uid})
        self.sinks_mixin.on_write_reset_done(sub_sink_uid)

    def _on_source_start(self):
        if self.log.output_level >= logging.TRACE:
            self.log.trace("_on_source_start", None)
        self.source_mixin.on_started() # Signal early start
        self._check_state()

    def _on_source_stopping(self):
        if self.log.output_level >= logging.TRACE:
            self.log.trace("_on_source_stopping", None)
        self._check_state()

    def _on_sinks_reset(self):
        if self.log.output_level >= logging.TRACE:
            self.log.trace("_on_sinks_reset", None)
        self._check_state()

    def _on_sinks_quiescent(self):
        if self.log.output_level >= logging.TRACE:
            self.log.trace("_on_sinks_quiescent", None)
        self._check_state()

    def _start(self):
        if self.log.output_level >= logging.TRACE:
            self.log.trace("_start", None)
        self._start_fn()

    def _stop(self):
        if self.log.output_level >= logging.TRACE:
            self.log.trace("_stop", None)
        self.sinks_mixin.reset()
        self._stop_fn()

    # def restart(self):
    #     # Stop to be restarted if/when source & sinks are OK
    #     self._stop()

    def close(self):
        if self.log.output_level >= logging.TRACE:
            self.log.trace("close", None)
        self.state = STATE_CLOSING
        self._stop_fn()
        self.sinks_mixin.close()

class SubscriberSourceMixin(object):
    @property
    uid: int
    @property
    state: int
    @property
    source_state: int
    @property
    _source: ?Source
    @property
    _has_pending_source: bool
    @property
    _pending_source: ?Source
    @property
    _on_source_state_trampoline_fn: action(int, int) -> None

    @property
    _start_fn: proc() -> None
    @property
    _stopping_fn: proc() -> None

    def __init__(self,
            uid: int,
            start: proc() -> None,
            stopping: proc() -> None,
            on_source_state_trampoline: action(int, int) -> None):

        self.uid = uid

        self.state = STATE_STOPPED
        self.source_state = STATE_STOPPED

        self._source = None
        self._has_pending_source = False
        self._pending_source = None

        self._start_fn = start
        self._stopping_fn = stopping
        self._on_source_state_trampoline_fn = on_source_state_trampoline

    def get_source(self) -> ?Source:
        return self._source

    def update_source(self, source: Source):
        old_source = self._source
        if old_source is not None:
            if self.state == STATE_RUNNING:
                self._has_pending_source = True
                self._pending_source = source
                self._stop()
            else:
                self._has_pending_source = False
                self._pending_source = None
                self._set_source(source)
        else:
            self._set_source(source)

    def on_started(self):
        if self.state in [STATE_STOPPING, STATE_STOPPED]:
            self._stopping_fn()

    def on_stopped(self):
        if self.state != STATE_CLOSED:
            self.state = STATE_STOPPED
            if self._has_pending_source:
                self._set_source(self._pending_source)
                self._has_pending_source = False
                self._pending_source = None

    def close(self):
        self.state = STATE_CLOSED
        self._has_pending_source = False
        self._pending_source = None
        self._set_source(None)

    def on_source_state(self, source_uid: int, source_state: int):
        source = self._source
        if not (source is not None and source_uid == source.uid()):
            return

        self.source_state = source_state

        if source_state == STATE_RUNNING:
            if self.state == STATE_STOPPED:
                self._start()
        else:
            if self.state == STATE_RUNNING:
                self._stop()

    def _set_source(self, source: ?Source):
        old_source = self._source
        if old_source is not None:
            old_source.detach(self.uid)
        self._source = source
        if source is not None:
            source.attach(self.uid, self._on_source_state_trampoline_fn)

    def _stop(self):
        self.state = STATE_STOPPING
        self._stopping_fn()

    def _start(self):
        self.state = STATE_RUNNING
        self._start_fn()

class SubscriberSinksMixin(object):
    @property
    uid: int
    @property
    sub_sinks: dict[Keypath, SubscriberSink]
    @property
    pending_add_sub_sinks: dict[Keypath, SubscriberSink]
    @property
    pending_reset: dict[int, SubscriberSink]
    @property
    resync_source_fn: proc() -> None
    @property
    write_reset_fn: proc(action(Node, TNode) -> None) -> None
    @property
    on_reset_fn: proc() -> None
    @property
    on_reset_done_trampoline_fn: action(int) -> None
    @property
    on_quiescent_fn: proc() -> None

    def __init__(self,
            uid: int,
            resync_source: proc() -> None,
            write_reset: proc(action(Node, TNode) -> None) -> None,
            on_reset_done_trampoline: action(int) -> None,
            on_reset: proc() -> None,
            on_quiescent: proc() -> None):

        self.uid = uid
        self.sub_sinks = {}
        self.pending_add_sub_sinks = {}
        self.pending_reset = {}
        self.resync_source_fn = resync_source
        self.write_reset_fn = write_reset
        self.on_reset_done_trampoline_fn = on_reset_done_trampoline
        self.on_reset_fn = on_reset
        self.on_quiescent_fn = on_quiescent

    def update(self, sink_updates: list[(Keypath, ?SubscriberSink)]):
        do_resync = False
        for sub_sink_key, sub_sink in sink_updates:
            if sub_sink is not None:
                if self._try_remove_sub_sink_key(sub_sink.key):
                    self._replace_pending_add_sub_sink(sub_sink)
                else:
                    self._add_sub_sink(sub_sink)
                    do_resync = True
            else:
                self._remove_sub_sink_key(sub_sink_key)
        if do_resync:
            self.resync_source_fn()

    def write(self, node: Node, source_params: TNode) -> None:
        is_delta = source_params.has_child(PTag(None, 'delta'))
        # Skip writes to new sinks until we get a non-delta payload.
        for sub_sink in self.sub_sinks.values():
            if not (is_delta and sub_sink.is_reset):
                sub_sink.is_reset = False
                sub_sink.write(node, source_params)

    def _replace_pending_add_sub_sink(self, sub_sink: SubscriberSink):
        prev_pending_sub_sink = try_pop(self.pending_add_sub_sinks, sub_sink.key)
        if prev_pending_sub_sink is not None:
            prev_pending_sub_sink.close()
        self.pending_add_sub_sinks[sub_sink.key] = sub_sink

    def _add_sub_sink(self, sub_sink: SubscriberSink):
        self.sub_sinks[sub_sink.key] = sub_sink
        #sub_sink.attach(self.uid, self._on_sink_state)
        sub_sink.attach(self.uid, lambda u, s: None)
        # TODO: Have sink report when running and hold off output until then + resync?

    def _try_remove_sub_sink_key(self, sub_sink_key: Keypath) -> bool:
        sub_sink = try_pop(self.sub_sinks, sub_sink_key)
        if sub_sink is not None:
            self._schedule_sub_sink_removal(sub_sink)
            return True
        return False

    def _remove_sub_sink_key(self, sub_sink_key: Keypath):
        updated = False

        sub_sink = try_pop(self.sub_sinks, sub_sink_key)
        if sub_sink is not None:
            self._schedule_sub_sink_removal(sub_sink)
            updated = True

        pending_sub_sink = try_pop(self.pending_add_sub_sinks, sub_sink_key)
        if pending_sub_sink is not None:
            pending_sub_sink.close()
            updated = True

        if updated:
            self._check_quiescence()

    def _schedule_sub_sink_removal(self, sub_sink: SubscriberSink):
        if sub_sink.is_reset:
            self._finalize_sub_sink_removal(sub_sink)
        else:
            self._schedule_sub_sink_reset(sub_sink)

    def _finalize_sub_sink_removal(self, sub_sink: SubscriberSink):
        sub_sink.detach(self.uid)
        sub_sink.close() # We have ownership of the SubscriptionSink but NOT the encapsulated Sink
        pending_add_sub_sink = try_pop(self.pending_add_sub_sinks, sub_sink.key)
        if pending_add_sub_sink is not None:
            self._add_sub_sink(pending_add_sub_sink)
            self.resync_source_fn()
        else:
            self._check_quiescence()

    def _schedule_sub_sink_reset(self, sub_sink: SubscriberSink):
        self.pending_reset[sub_sink.uid()] = sub_sink
        sink_uid = sub_sink.uid()
        def _write_fn(node: Node, source_params: TNode):
            def _done_cb():
                self.on_reset_done_trampoline_fn(sink_uid)
            sub_sink.write(node, source_params, _done_cb)
        self.write_reset_fn(_write_fn)

    def on_write_reset_done(self, sub_sink_uid: int):
        sub_sink = try_pop(self.pending_reset, sub_sink_uid)
        if sub_sink is not None:
            sub_sink.is_reset = True
            _active_sub_sink = try_get(self.sub_sinks, sub_sink.key)
            _pending_sub_sink = try_get(self.sub_sinks, sub_sink.key)
            if not (_active_sub_sink is not None and _active_sub_sink.uid() == sub_sink_uid
                    or _pending_sub_sink is not None and _pending_sub_sink.uid() == sub_sink_uid):
                # The reset sink is not active or pending add, i.e. it was reset to be removed
                self._finalize_sub_sink_removal(sub_sink)
            self._check_reset()

    def _check_reset(self):
        if self.is_reset():
            self.on_reset_fn()

    def reset(self):
        for sub_sink in self.sub_sinks.values():
            self._schedule_sub_sink_reset(sub_sink)
        else:
            self._check_reset()

    def is_reset(self) -> bool:
        return len(self.pending_reset) == 0

    def _check_quiescence(self):
        if self.is_quiescent():
            self.on_quiescent_fn()

    def is_quiescent(self) -> bool:
        return len(self.sub_sinks) == 0 and len(self.pending_add_sub_sinks) == 0 and self.is_reset()

    def close(self):
        for pending_sub_sink in self.pending_add_sub_sinks.values():
            pending_sub_sink.close()
        #self.pending_add_sub_sinks.clear()
        self.pending_add_sub_sinks = {}

        for sub_sink_key in list(self.sub_sinks.keys()):
            self._remove_sub_sink_key(sub_sink_key)

        self._check_reset()
        self._check_quiescence()

class SubscriberSink(object):
    @property
    key: Keypath
    @property
    config: TNode # TODO: Not really needed here
    @property
    sink: Sink
    @property
    transforms: list[Transform]
    @property
    head_cb: action(Node, TNode, ?action() -> None) -> None
    @property
    is_reset: bool

    def __init__(self,
            key: Keypath,
            config: TNode,
            sink: Sink,
            transforms: list[Transform],
            head_cb: action(Node, TNode, ?action() -> None) -> None):

        self.key = key
        self.config = config
        self.sink = sink
        self.transforms = transforms
        self.head_cb = head_cb
        self.is_reset = True

    def __str__(self) -> str:
        return "SubscriberSink(" + str(self.key) + ", " + str(self.config) + ", " + str(self.sink) + ")"

    def __repr__(self):
        return self.__str__()

    def write(self, node: Node, source_params: TNode, done_cb: ?action() -> None) -> None:
        self.head_cb(node, source_params, done_cb)

    def close(self):
        # Close transforms but NOT sink as it's owned by SubscriberManager
        for transform in self.transforms:
            transform.close()
        self.transforms.clear()

    #extension SubscriberSink(ServerProxy):
    def uid(self):
        return self.sink.uid()

    proc def attach(self, uid: int, state_cb: action(int, int) -> None):
        self.sink.attach(uid, state_cb)

    proc def detach(self, uid: int):
        self.sink.detach(uid)

class SubscriberUpdate(object):
    @property
    config: ?TNode
    @property
    source: ?Source
    @property
    sinks: list[(Keypath, ?SubscriberSink)]

    def __init__(self, config: ?TNode, source: ?Source, sinks: list[(Keypath, ?SubscriberSink)]):
        self.config = config
        self.source = source
        self.sinks = sinks

    def __str__(self) -> str:
        s = []
        for sink_uid, sink in self.sinks:
            unsafe_list_append(s, "(" + str(sink_uid) + ", " + optional_str(sink, "None") + ")")
        return "SubscriberUpdate(" + optional_str(self.config, "None") + ", " + optional_str(self.source, "None") + ", " + str(s) + ")"

    def __repr__(self):
        return self.__str__()

#
# Transform
#

class Transform(object):
    @property
    post_fn: action(Node, TNode, ?action() -> None) -> None
    @property
    close_fn: action() -> None

    def __init__(
            self,
            post_fn: action(Node, TNode, ?action() -> None) -> None,
            close_fn: action() -> None,
            ):
        self.post_fn = post_fn
        self.close_fn = close_fn

    def post(self, node: Node, source_params: TNode, done_cb: ?action() -> None) -> None:
        self.post_fn(node, source_params, done_cb)

    def close(self):
        self.close_fn()
