# Copyright (C) Deutsche Telekom AG
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import logging
import testing

from telemetrify.common.mod import *
from telemetrify.common.utils import *
from telemetrify.main.common import *

class EventTester(object):
    @property
    _expected_events: list[str]
    @property
    __prev_index: int
    @property
    __curr_index: int
    @property
    __next_index: int
    @property
    _actual_events: list[str]
    @property
    __next_step: ?action() -> None
    @property
    report_result: action(?bool, ?Exception) -> None

    def __init__(self, report_result: action(?bool, ?Exception) -> None):
        self.report_result = report_result
        #self.reset()
        self._expected_events = []
        self.__prev_index = 0
        self.__curr_index = 0
        self.__next_index = 0
        self._actual_events = []
        self.__next_step = None

    def reset(self):
        self._expected_events = []
        self.__prev_index = 0
        self.__curr_index = 0
        self.__next_index = 0
        self._actual_events = []
        self.__next_step = None

    def on_event(self, e: ?str):
        if e is not None:
            self._actual_events.append(e)
            self.__curr_index += 1
        if self.__curr_index == self.__next_index:
            if self._actual_events[self.__prev_index:self.__next_index] == self._expected_events[self.__prev_index:self.__next_index]:
                _next_step: ?action() -> None = self.__next_step
                if _next_step is not None:
                    #_next_step()
                    #after 0: _next_step()
                    def _f():
                        _next_step()
                    after 0: _f()
                else:
                    self.report_result(True, None)
            else:
                self.report_result(False, AssertionError("Expected events: " + list_str(self._expected_events) + " actual events: " + list_str(self._actual_events)))

    def expect(self, events: list[str], next_step: ?action() -> None):
        self._expected_events.extend(events)
        self.__prev_index = self.__next_index
        self.__next_index += len(events)
        self.__next_step = next_step

    def step(self, next_step: ?action() -> None = None):
        self.__next_step = next_step
        self.on_event(None)

actor MockSource(uid: int, on_closed: action() -> None):
    # Workaround compiler ordering issue
    #var server = ServerMixin(uid, _on_server_closed)
    var server = ServerMixin(uid, lambda: None)

    def attach(client_uid: int, state_cb: action(int, int) -> None):
        server.attach(client_uid, state_cb)

    def detach(client_uid: int):
        server.detach(client_uid)

    def close():
        server.on_closing()

    def on_started():
        server.on_started()

    def on_stopped():
        server.on_stopped()

    def _on_server_closed():
        on_closed()

    # Workaround compiler ordering issue
    server.on_closed = _on_server_closed

actor MockSink(uid: int, on_closed: action() -> None):
    # Workaround compiler ordering issue
    #var server = ServerMixin(uid, _on_server_closed)
    var server = ServerMixin(uid, lambda: None)

    def attach(client_uid: int, state_cb: action(int, int) -> None):
        server.attach(client_uid, state_cb)

    def detach(client_uid: int):
        server.detach(client_uid)

    def close():
        server.on_closing()

    def write(node: Node, source_params: TNode, sink_config: TNode, done_cb: ?action() -> None) -> None:
        if done_cb is not None:
            done_cb()

    def on_stopped():
        server.on_stopped()

    def _on_server_closed():
        on_closed()

    # Workaround compiler ordering issue
    server.on_closed = _on_server_closed

#
# (Source)ServerMixin
#

actor SourceServerMixinTester_1(report_result, log_handler):
    log = logging.Logger(log_handler)

    var e = EventTester(report_result)

    def on_closed():
        e.on_event("SOURCE CLOSED")

    var source_act = MockSource(1, on_closed)
    var source = Source(1, source_act.attach, source_act.detach, source_act.close)

    def test():
        try:
            e.expect(["SOURCE CLOSED"], None)

            source.close()
        except Exception as ex:
            report_result(False, ex)

def _test_source_server_mixin_1(report_result, log_handler: logging.Handler) -> None:
    SourceServerMixinTester_1(report_result, log_handler).test()

actor SourceServerMixinTester_2(report_result, log_handler):
    log = logging.Logger(log_handler)

    var e = EventTester(report_result)

    var source_act = MockSource(1, lambda: None)
    var source = Source(1, source_act.attach, source_act.detach, source_act.close)

    def on_source_state_trampoline(source_uid: int, source_state: int):
        e.on_event("SOURCE " + str(source_uid) + " " + state_str(source_state))

    def test():
        try:
            e.expect(["SOURCE 1 STOPPED"], test_1)

            source.attach(0, on_source_state_trampoline)
        except Exception as ex:
            report_result(False, ex)

    def test_1():
        try:
            e.expect(["SOURCE 1 RUNNING"], test_2)

            source_act.on_started()
        except Exception as ex:
            report_result(False, ex)

    def test_2():
        try:
            e.expect(["SOURCE 1 STOPPED"], None)

            source_act.on_stopped()
        except Exception as ex:
            report_result(False, ex)

def _test_source_server_mixin_2(report_result, log_handler: logging.Handler) -> None:
    SourceServerMixinTester_2(report_result, log_handler).test()

#
# SubscriberSourceMixin
#

actor SubscriberSourceMixinTester_1(report_result, log_handler):
    log = logging.Logger(log_handler)

    var e = EventTester(report_result)

    var source_act_1 = MockSource(1, lambda: None)
    var source_1 = Source(1, source_act_1.attach, source_act_1.detach, source_act_1.close)

    var source_act_2 = MockSource(2, lambda: None)
    var source_2 = Source(2, source_act_2.attach, source_act_2.detach, source_act_2.close)

    var m = SubscriberSourceMixin(0, lambda: None, lambda: None, lambda i, s: None)

    def on_start():
        e.on_event("START")
        m.on_started()

    def on_stopping():
        e.on_event("STOP")
        m.on_stopped()

    def on_source_state_trampoline(source_uid: int, source_state: int):
        m.on_source_state(source_uid, source_state)

    def test():
        try:
            # Add source and start it
            e.expect(["START"], test_1)
            m = SubscriberSourceMixin(0, on_start, on_stopping, on_source_state_trampoline)
            source_act_1.on_started()
            m.update_source(source_1)
        except Exception as ex:
            report_result(False, ex)

    def test_1():
        try:
            # Change source but don't start the new one yet
            _verify_source(source_1)
            e.expect(["STOP"], test_2)
            m.update_source(source_2)
        except Exception as ex:
            report_result(False, ex)

    def test_2():
        try:
            # Start the new source
            e.expect(["START"], test_3)
            source_act_2.on_started()
        except Exception as ex:
            report_result(False, ex)

    def test_3():
        try:
            # Verify new source
            _verify_source(source_2)
            e.step()
        except Exception as ex:
            report_result(False, ex)

    def _verify_source(expected_source: Source):
        _actual_source = m.get_source()
        if _actual_source is not None:
            testing.assertEqual(_actual_source.uid(), expected_source.uid(), "Wrong source_uid")
        else:
            raise AssertionError("No actual source. Expected source_uid: " + str(expected_source.uid()))

def _test_subscriber_source_mixin_1(report_result, log_handler: logging.Handler) -> None:
    SubscriberSourceMixinTester_1(report_result, log_handler).test()

#
# SubscriberSourceMixin
#

def _create_subscriber_sink(sink_key: Keypath, sink_uid: int) -> SubscriberSink:
    sink_act = MockSink(sink_uid, lambda: None)
    sink = Sink(sink_uid, sink_act.attach, sink_act.detach, sink_act.close, sink_act.write)
    config = tnode_empty()
    head_cb: action(Node, TNode, ?action() -> None) -> None = action lambda n, p, d: sink.write(n, p, config, d)
    return SubscriberSink(sink_key, config, sink, [], head_cb)

actor SubscriberSinksMixinTester_1(report_result, log_handler):
    log = logging.Logger(log_handler)

    var e = EventTester(report_result)

    var sink_key_1 = Keypath([Key(["sink-A"])])
    var sub_sink_1 = _create_subscriber_sink(sink_key_1, 1)

    var sink_key_2 = Keypath([Key(["sink-B"])])
    var sub_sink_2 = _create_subscriber_sink(sink_key_2, 2)

    var sink_key_3 = Keypath([Key(["sink-A"])]) # Yes same key as sink_key_1
    var sub_sink_3 = _create_subscriber_sink(sink_key_3, 3)

    var m = SubscriberSinksMixin(0, lambda: None, lambda w: None, lambda i: None, lambda: None, lambda: None)

    def on_resync():
        e.on_event("RESYNC")

    def write_reset(write_cb: action(Node, TNode) -> None):
        write_cb(tnode_empty(), tnode_empty())

    def on_write_reset_done_trampoline(sink_uid: int):
        m.on_write_reset_done(sink_uid)

    def on_reset():
        e.on_event("ON_RESET")

    def on_quiescent():
        e.on_event("ON_QUIESCENT")

    def test():
        try:
            # Add two sinks
            e.expect(["RESYNC"], test_1)

            m = SubscriberSinksMixin(0, on_resync, write_reset, on_write_reset_done_trampoline, on_reset, on_quiescent)
            m.update([(sink_key_1, sub_sink_1), (sink_key_2, sub_sink_2)])
        except Exception as ex:
            report_result(False, ex)

    def test_1():
        try:
            # Remove 2nd sink
            e.expect(["ON_RESET"], test_2)
            m.write(tnode_empty(), tnode_empty()) # Clear reset
            m.update([(sink_key_2, None)])
        except Exception as ex:
            report_result(False, ex)

    def test_2():
        try:
            # Add sink with same key as previous, i.e. replace sink_1 with sink_3
            e.expect(["RESYNC", "ON_RESET"], test_3)
            m.write(tnode_empty(), tnode_empty()) # Clear reset
            m.update([(sink_key_3, sub_sink_3)])
        except Exception as ex:
            report_result(False, ex)

    def test_3():
        try:
            # Remove the only sink
            e.expect(["ON_QUIESCENT"], None)
            m.update([(sink_key_3, None)])
        except Exception as ex:
            report_result(False, ex)

def _test_subscriber_sinks_mixin_1(report_result, log_handler: logging.Handler) -> None:
    SubscriberSinksMixinTester_1(report_result, log_handler).test()
