# Copyright (C) Deutsche Telekom AG
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import logging
import net
import time
import xml

import telemetrify.net.netconf as netconf
import telemetrify.nsoapi.schema as schema

from telemetrify.common.mod import *
from telemetrify.common.utils import *
from telemetrify.nsoapi.schema import QName, SchemaPath
from telemetrify.main.common import *
from telemetrify.main.config import *

actor NetconfSource(
        reached_state_cb: action(int) -> None,
        auth: WorldCap,
        shared_schema: schema.SharedSchema,
        log_handler: logging.Handler):

    var logh = logging.Handler("netconf-source")
    if log_handler is not None:
        logh.set_handler(log_handler)

    var log = logging.Logger(logh)

    var config: TNode = tnode_empty()
    var client: ?netconf.Client = None
    var client_seqno: int = 0
    # var manager: DelegateMiddleManager[Subscriber] = DelegateMiddleManager(on_reached_state, _on_subscriber_reached_state_trampoline, _connect_client, _close_client)
    # Workaround compiler ordering issue
    var manager: DelegateMiddleManager[Subscriber] = DelegateMiddleManager(lambda s: None, lambda i, s: None, lambda: None, lambda: None)

    log.info("SOURCE netconf CREATED", None)

    def update_config(source_update: ?TNode, subscription_updates: list[(Keypath, ?SubscriptionUpdate)]):
        log.debug("SOURCE netconf CONFIG update", {"source_update": optional_str(source_update, "None")})
        log.debug("SOURCE netconf SUBSCRIPTION update", {"subscription_updates": subscription_updates})

        restart = False

        if source_update is not None:
            config = source_update
            DelegateMiddleManager_try_restart_inner(manager)

        for dev_sub_key, sub_update in subscription_updates:
            if sub_update is not None:
                log.trace("SOURCE netconf SUBSCRIPTION update", {"sub_update": sub_update})
                # sub = manager.try_get_delegate(dev_sub_key)
                sub = DelegateMiddleManager_try_get_delegate(manager, dev_sub_key) # https://github.com/actonlang/acton/issues/1448

                if sub is not None:
                    log.trace("SOURCE netconf SUBSCRIPTION update exists", {"sub_update": sub_update})
                    sub.update_config(sub_update)
                else:
                    log.trace("SOURCE netconf SUBSCRIPTION update is new", {"sub_update": sub_update})
                    new_sub = _create_subscriber(dev_sub_key, sub_update)
            else:
                # manager.remove_delegate(dev_sub_key)
                DelegateMiddleManager_remove_delegate(manager, dev_sub_key) # https://github.com/actonlang/acton/issues/1448

    def _create_subscriber(dev_sub_key: Keypath, sub_update: SubscriptionUpdate) -> Subscriber:
        sub_config = sub_update.config
        if sub_config is not None:
            _config = sub_config.config
            if _config[SUBSCRIPTION_TYPE_KEY_ACTION_POLLER].exists():
                _id, _reached_state_cb = DelegateMiddleManager_reserve_delegate(manager, dev_sub_key) # https://github.com/actonlang/acton/issues/1448
                sub_act = NetconfRpcPollSubscription(self, dev_sub_key, _reached_state_cb, shared_schema, logh)
                sub = Subscriber(sub_act.set_target_state, sub_act.update_config)
                DelegateMiddleManager_add_delegate(manager, _id, sub, lambda s: s.update_config(sub_update)) # https://github.com/actonlang/acton/issues/1448
                return sub
            elif _config[SUBSCRIPTION_TYPE_KEY_GET_POLLER].exists():
                _id, _reached_state_cb = DelegateMiddleManager_reserve_delegate(manager, dev_sub_key) # https://github.com/actonlang/acton/issues/1448
                sub_act = NetconfGetPollSubscription(self, dev_sub_key, _reached_state_cb, shared_schema, logh)
                sub = Subscriber(sub_act.set_target_state, sub_act.update_config)
                DelegateMiddleManager_add_delegate(manager, _id, sub, lambda s: s.update_config(sub_update)) # https://github.com/actonlang/acton/issues/1448
                return sub

        raise Exception("Broken invariant: Attempted to create subscriber from invalid config: " + optional_str(sub_config, "None"))

    def rpc(content: xml.Node, add_rpc_attrs: list[(str, str)], callback: action(?xml.Node) -> None) -> None:
        _client = client
        if _client is not None:
            # actonc: Acton/LambdaLifter.hs:(337,50)-(340,84): Non-exhaustive patterns in function attr
            # _client.rpc(content, add_rpc_attrs, lambda _c, n: callback(n))
            def __callback(_c, n):
                callback(n)
            _client.rpc(content, add_rpc_attrs, __callback)
        else:
            callback(None)

    def rpc_action(content: xml.Node, add_rpc_attrs: list[(str, str)], callback: action(?xml.Node) -> None) -> None:
        _client = client
        if _client is not None:
            # actonc: Acton/LambdaLifter.hs:(337,50)-(340,84): Non-exhaustive patterns in function attr
            # _client.rpc_action(content, add_rpc_attrs, lambda _c, n: callback(n))
            def __callback(_c, n):
                callback(n)
            _client.rpc_action(content, add_rpc_attrs, __callback)
        else:
            callback(None)

    def _on_client_connect(c, seqno: int):
        if seqno != client_seqno:
            c.close()
            return
        log.debug("SOURCE netconf CONNECTED", None)
        DelegateMiddleManager_on_inner_started(manager)

    def _on_client_defunct(error_msg: str, seqno: int):
        if seqno != client_seqno:
            return
        _close_client()

        def _retry_client():
            if manager.target_state == STATE_RUNNING:
                _connect_client()

        # TODO: Configurable retry timer/backoff?
        after 1: _retry_client()

    def _on_client_notif(node: xml.Node, seqno: int):
        # if seqno != client_seqno:
        #     return
        pass

    def _connect_client():
        if client is not None:
            return

        address = config[PTag('tlm', 'address')].try_str()
        port = config[PTag('tlm', 'port')].try_int()
        username = config[PTag('tlm', 'username')].try_str()
        password = config[PTag('tlm', 'password')].try_str()
        key: ?str = None # TODO
        log.debug("SOURCE netconf CONNECT", {"address": optional_str(address, "None"), "port": optional_str(port, "None"), "username": optional_str(username, "None"), "password": optional_str(password, "None")})

        if address is not None and port is not None and \
                username is not None and (password is not None or key is not None):

            client_seqno += 1

            def __on_client_connect(c):
                _on_client_connect(c, client_seqno)
            def __on_client_defunct(_c, e):
                _on_client_defunct(e, client_seqno)
            def __on_client_notif(_c, n):
                _on_client_notif(n, client_seqno)

            new_client = netconf.Client(auth, address, port, username, password, key,
                # lambda _c: _on_client_connect(client_seqno),
                __on_client_connect,
                # lambda _c, e: _on_client_defunct(e, client_seqno),
                __on_client_defunct,
                # lambda _c, n: _on_client_notif(n, client_seqno))
                __on_client_notif,
                logh)

            client = new_client

            # # <TEST>
            # def _pretend_connect():
            #     log.debug("SOURCE netconf CONNECTED (pretending)", None)
            #     DelegateMiddleManager_on_inner_started(manager)
            # after 0: _pretend_connect()
            # # </TEST>

    def _close_client():
        log.debug("SOURCE netconf DISCONNECT", None)
        _client = client
        if _client is not None:
            client_seqno += 1
            _client.close()
            client = None
        DelegateMiddleManager_on_inner_stopped(manager)

    def set_target_state(target_state: int):
        log.debug("SOURCE netconf SET TARGET STATE", {"target_state": state_str(target_state)})
        if not DelegateMiddleManager_set_target_state(manager, target_state):
            log.error("SOURCE netconf UNEXPECTED STATE ignoring", {"target_state": state_str(target_state)})

    def on_reached_state(state: int):
        log.info("SOURCE netconf REACHED STATE " + state_str(state), None)
        reached_state_cb(state)

    def _on_subscriber_reached_state_trampoline(_id: DelegateId, state: int):
        # manager.on_delegate_reached_state(_id, state)
        DelegateMiddleManager_on_delegate_reached_state(manager, _id, state) # https://github.com/actonlang/acton/issues/1448

    # Workaround compiler ordering issue
    manager._start_fn = _connect_client
    manager._stop_fn = _close_client
    manager._reached_state_cb = on_reached_state
    manager._delegate_manager._on_delegate_reached_state_trampoline_fn = _on_subscriber_reached_state_trampoline

actor NetconfRpcPollSubscription(
        source: NetconfSource,
        dev_sub_key: Keypath,
        reached_state_cb: action(int) -> None,
        shared_schema: schema.SharedSchema,
        log_handler: ?logging.Handler):

    var logh = logging.Handler("netconf-rpc-poll-subscription")
    if log_handler is not None:
        logh.set_handler(log_handler)

    var log = logging.Logger(logh)

    _schema = schema.unsafe_get_shared_schema(shared_schema)
    sinks = SubscriptionSinkCollection()

    var poller_seqno: int = 0
    var rpc_xml: ?xml.Node = None
    var is_action: bool = False
    var schema_path: ?SchemaPath = None
    var period: time.Duration = time.Duration(60, 0, time.MonotonicClock(0, 0, 0))

    # var worker_state = DelegateWorker(on_reached_state, _on_start, _on_stop)
    # Workaround compiler ordering issue
    var worker_state = DelegateWorker(lambda s: None, lambda: None, lambda: None)

    log.info("SUBSCRIBER netconf-rpc-poll CREATED", None)

    def _do_rpc_request(seqno: int, poll_ts: time.Instant):
        if seqno != poller_seqno:
            return

        if rpc_xml is not None:
            request_ts = time.time()

            if is_action:
                source.rpc_action(rpc_xml, [], lambda r: _on_rpc_reply(seqno, poll_ts, request_ts, r))
            else:
                source.rpc(rpc_xml, [], lambda r: _on_rpc_reply(seqno, poll_ts, request_ts, r))

        #after 0.1: _on_rpc_reply(seqno, poll_ts, None)

    def _on_rpc_reply(seqno: int, last_ts: time.Instant, request_ts: time.Instant, node: ?xml.Node):
        if seqno != poller_seqno:
            return

        # # # <TEST>
        # # if node is None:
        # node = \
        #     xml.Node("rpc-reply", [(None, "urn:ietf:params:xml:ns:netconf:base:1.0")], None, [], [
        #         xml.Node("interface-information", [(None, "urn:juniper-rpc")], None, [], [
        #             xml.Node("physical-interface", [], None, [], [
        #                 xml.Node("name", [], None, [], [], "ge-0/0/0", None),
        #                 xml.Node("traffic-statistics", [], None, [], [
        #                     xml.Node("input-bytes", [], None, [], [], "12300", None),
        #                     xml.Node("output-bytes", [], None, [], [], "45600", None),
        #                     xml.Node("input-packets", [], None, [], [], "123", None),
        #                     xml.Node("output-packets", [], None, [], [], "456", None)
        #                 ], None, None)
        #             ], None, None)
        #         ], None, None)
        #     ], None, None)
        # # # </TEST>

        # TODO: Process node
        if node is not None:
            xnode = netconf.netconf_to_xnode(node, [], OP_MERGE)
            log.debug("SUBSCRIBER netconf-rpc-poll POLL:", {"xnode": xnode})
            source_params = tnode_root()
            source_params_try_append_dev_sub(source_params, dev_sub_key)
            source_params.leaf(None, SOURCE_PARAM_TIMESTAMP, request_ts)
            if schema_path is not None:
                source_params.leaf(None, SOURCE_PARAM_SCHEMA_PATH, schema_path)
            sinks.write(xnode, source_params)
        else:
            log.error("SUBSCRIBER netconf-rpc-poll POLL interrupted", None)

        #log.undecided("POLLED...", None)
        curr_ts = time.monotonic()
        next_ts = last_ts.add(period)
        #print("  period:", period.to_float())

        if next_ts < curr_ts:
            # Allow drift when reply arrived later than next period
            # TODO: Quantize to period?
            next_ts = curr_ts

        # print("  last_ts:", last_ts)
        # print("  curr_ts:", curr_ts)
        # print("  next_ts:", next_ts)

        delay = next_ts.since(curr_ts)
        log.debug("delay (s)", {"delay": delay.to_float()})
        after delay.to_float(): _do_rpc_request(seqno, next_ts)

    def update_config(update: SubscriptionUpdate):
        sinks.update_added(update.sinks)

        __config = update.config
        if __config is not None:
            _config: SubscriptionSourceConfig = __config
            DelegateWorker_try_restart_inner(worker_state)
            log.debug("SUBSCRIBER netconf-rpc-poll CONFIG", {"config": _config})

            poll = _config.config[SUBSCRIPTION_TYPE_KEY_ACTION_POLLER]
            path = poll[PTag('tlm', 'path')].try_str()
            period_ms = poll[PTag('tlm', 'period')].try_int()

            if path is not None:
                # TODO: Proper parsing into ptag-/key-path
                #_tag = schema.QName.netconf_to_value(path, None)
                _tag = QName.netconf_to_value(path, None)
                if _tag is not None:
                    _update_rpc_params(Keypath([_tag]), _config.schema_settings)

            if period_ms is not None and rpc_xml is not None:
                period = time.Duration(period_ms // 10**3, (period_ms % 10**3) * 10**15, time.MonotonicClock(0, 0, 0))
                #print("period: " + str(period.to_float()) + "s")
            else:
                pass # TODO: Indicate config error

        sinks.update_removed(update.sinks)

    def _update_rpc_params(rpc_path: Keypath, schema_settings: SchemaSettings):
        _rpc_xml: ?xml.Node = None
        _is_action = False
        _schema_path: ?SchemaPath = None

        cursor = schema.Cursor(_schema)
        if cursor.push_schema_path(SchemaPath([PTag('ncs', 'devices'), PTag('ncs', 'device')], [])):
            is_cursor_ok = False
            rpc_path_len = len(rpc_path)
            if rpc_path_len == 1:
                # NED-RPC
                if cursor.push(PTag('ncs', 'rpc')):
                    # Defaulting to device live-status ned-id unless explicitly set for subscription source
                    if cursor.node().is_mount_point():
                        ned_id = schema_settings.live_status_ned_id
                        if ned_id is not None:
                            cursor.set_mount_id(ned_id)
                    unmangled_rpc_tag = rpc_path[0]
                    if isinstance(unmangled_rpc_tag, PTag):
                        prefix = unmangled_rpc_tag.prefix
                        name = unmangled_rpc_tag.name
                        if cursor.push(PTag(prefix, 'rpc-' + name)) and cursor.push(unmangled_rpc_tag):
                            is_cursor_ok = True
            elif rpc_path_len > 1:
                # NED-ACTION
                if cursor.push(PTag('ncs', 'live-status')): # TODO: Any benefit to using PTag('ncs', 'config') instead? All actions are duplicated right?
                    # Defaulting to device live-status ned-id unless explicitly set for subscription source
                    if cursor.node().is_mount_point():
                        ned_id = schema_settings.live_status_ned_id
                        if ned_id is not None:
                            cursor.set_mount_id(ned_id)
                    is_cursor_ok = True
                    for _id in rpc_path:
                        if isinstance(_id, Tag) and not cursor.push(_id):
                            is_cursor_ok = False
                            break
                    _is_action = True

            if is_cursor_ok:
                rpc_itag = cursor.lookup_itag(cursor.node().tag)
                if rpc_itag is not None:
                    rpc_name = rpc_itag.name
                    ns = rpc_itag.ns
                    nsdefs = [(None, ns)] if ns is not None else []
                    _rpc_xml = xml.Node(rpc_itag.name, nsdefs, None, [], [], None, None)
                    _schema_path = cursor.get_schema_path()
                    # TODO: Configurable input params?

        rpc_xml = _rpc_xml
        is_action = _is_action
        schema_path = _schema_path

    def _start():
        log.debug("SUBSCRIBER netconf-rpc-poll START", None)

        if rpc_xml is not None:
            curr_ts = time.monotonic()
            after 0: _do_rpc_request(poller_seqno, curr_ts)
        DelegateWorker_on_inner_started(worker_state)

    def _stop():
        log.debug("SUBSCRIBER netconf-rpc-poll STOP", None)

        # stop poller
        poller_seqno += 1

        # write RESET
        cleanup_payload = XTree(OP_NOCREATE, ITag.root(), None, []) # TODO
        source_params = tnode_root()
        source_params_try_append_dev_sub(source_params, dev_sub_key)
        source_params.leaf(None, SOURCE_PARAM_TIMESTAMP, time.time())
        if schema_path is not None:
            source_params.leaf(None, SOURCE_PARAM_SCHEMA_PATH, schema_path)
        source_params.leaf(None, SOURCE_PARAM_RESET, None)
        sinks.write(cleanup_payload, source_params, _on_sink_reset)

    def _on_sink_reset():
        log.trace("SUBSCRIBER netconf-rpc-poll SINK RESET DONE", None)
        DelegateWorker_on_inner_stopped(worker_state)

    def set_target_state(target_state: int):
        log.debug("SUBSCRIBER netconf-rpc-poll SET TARGET STATE", {"target_state": state_str(target_state)})
        if not DelegateWorker_set_target_state(worker_state, target_state):
            log.error("SUBSCRIBER netconf-rpc-poll UNEXPECTED STATE ignoring", {"target_state": state_str(target_state)})

    def on_reached_state(state: int):
        log.info("SUBSCRIBER netconf-rpc-poll REACHED STATE " + state_str(state), None)
        reached_state_cb(state)

    # Workaround compiler ordering issue
    worker_state._start_fn = _start
    worker_state._stop_fn = _stop
    worker_state._reached_state_cb = on_reached_state

actor NetconfGetPollSubscription(
        source: NetconfSource,
        dev_sub_key: Keypath,
        reached_state_cb: action(int) -> None,
        shared_schema: schema.SharedSchema,
        log_handler: ?logging.Handler):

    var logh = logging.Handler("netconf-get-poll")
    if log_handler is not None:
        logh.set_handler(log_handler)

    var log = logging.Logger(logh)

    _schema = schema.unsafe_get_shared_schema(shared_schema)
    sinks = SubscriptionSinkCollection()

    var poller_seqno: int = 0
    var get_xml: ?xml.Node = None
    var schema_path: ?SchemaPath = None
    var period: time.Duration = time.Duration(60, 0, time.MonotonicClock(0, 0, 0))

    # var worker_state = DelegateWorker(on_reached_state, _on_start, _on_stop)
    # Workaround compiler ordering issue
    var worker_state = DelegateWorker(lambda s: None, lambda: None, lambda: None)

    log.info("SUBSCRIBER netconf-get-poll CREATED", None)

    def _do_get_request(seqno: int, poll_ts: time.Instant):
        if seqno != poller_seqno:
            return
        log.debug("SUBSCRIBER netconf-get-poll GET_REQUEST", None)

        log.trace("SUBSCRIBER netconf-get-poll GET_XML", {"get_xml": optional_str(get_xml, "None")})
        if get_xml is not None:
            request_ts = time.time()

            source.rpc(get_xml, [], lambda r: _on_get_reply(seqno, poll_ts, request_ts, r))

            # # <TEST>
            # node = xml.decode("""
            #     <rpc-reply message-id="1" xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
            #       <data>
            #         <ip-sla-stats xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-ip-sla-oper">
            #           <sla-oper-entry>
            #             <oper-id>167837954</oper-id>
            #             <stats>
            #               <oneway-latency>
            #                 <sample-count>100</sample-count>
            #                 <sd>
            #                   <min>7</min>
            #                   <avg>8</avg>
            #                   <max>11</max>
            #                   <accuracy>accuracy-milliseconds</accuracy>
            #                 </sd>
            #                 <ds>
            #                   <min>2</min>
            #                   <avg>13</avg>
            #                   <max>35</max>
            #                   <accuracy>accuracy-milliseconds</accuracy>
            #                 </ds>
            #               </oneway-latency>
            #               <jitter>
            #                 <sd-sample-count>100</sd-sample-count>
            #                 <ds-sample-count>100</ds-sample-count>
            #                 <sd>
            #                   <min>2</min>
            #                   <avg>3</avg>
            #                   <max>4</max>
            #                   <accuracy>accuracy-milliseconds</accuracy>
            #                 </sd>
            #                 <ds>
            #                   <min>3</min>
            #                   <avg>4</avg>
            #                   <max>5</max>
            #                   <accuracy>accuracy-milliseconds</accuracy>
            #                 </ds>
            #               </jitter>
            #               <packet-loss>
            #                 <sd-count>1</sd-count>
            #                 <ds-count>2</ds-count>
            #               </packet-loss>
            #             </stats>
            #           </sla-oper-entry>
            #           <sla-oper-entry>
            #             <oper-id>167838210</oper-id>
            #             <stats>
            #               <oneway-latency>
            #                 <sample-count>200</sample-count>
            #                 <sd>
            #                   <min>4</min>
            #                   <avg>5</avg>
            #                   <max>6</max>
            #                   <accuracy>accuracy-milliseconds</accuracy>
            #                 </sd>
            #                 <ds>
            #                   <min>5</min>
            #                   <avg>6</avg>
            #                   <max>7</max>
            #                   <accuracy>accuracy-milliseconds</accuracy>
            #                 </ds>
            #               </oneway-latency>
            #               <jitter>
            #                 <sd-sample-count>200</sd-sample-count>
            #                 <ds-sample-count>200</ds-sample-count>
            #                 <sd>
            #                   <min>1</min>
            #                   <avg>2</avg>
            #                   <max>3</max>
            #                   <accuracy>accuracy-milliseconds</accuracy>
            #                 </sd>
            #                 <ds>
            #                   <min>2</min>
            #                   <avg>3</avg>
            #                   <max>4</max>
            #                   <accuracy>accuracy-milliseconds</accuracy>
            #                 </ds>
            #               </jitter>
            #               <packet-loss>
            #                 <sd-count>5</sd-count>
            #                 <ds-count>7</ds-count>
            #               </packet-loss>
            #             </stats>
            #           </sla-oper-entry>
            #           <sla-oper-error-statistics>
            #             <oper-id>167837954</oper-id>
            #             <target-address>10.1.1.2</target-address>
            #           </sla-oper-error-statistics>
            #           <sla-oper-error-statistics>
            #             <oper-id>167838210</oper-id>
            #             <target-address>10.1.2.2</target-address>
            #           </sla-oper-error-statistics>
            #         </ip-sla-stats>
            #       </data>
            #     </rpc-reply>
            #     """)

            # after 0: _on_get_reply(seqno, poll_ts, request_ts, node)
            # # </TEST>

    def _on_get_reply(seqno: int, last_ts: time.Instant, request_ts: time.Instant, node: ?xml.Node):
        log.debug("SUBSCRIBER netconf-get-poll GET_REPLY", None)
        if seqno != poller_seqno:
            return

        # TODO: Process node
        if node is not None:
            if node.tag == "rpc-reply":
                 node = node.children[0]
                 if node.tag == "data" and len(node.children) >= 1:
                     node = node.children[0]
                     xnode = netconf.netconf_to_xnode(node, [], OP_MERGE)
                     log.trace("SUBSCRIBER netconf-get-poll POLL:", {"xnode": xnode})
                     source_params = tnode_root()
                     source_params_try_append_dev_sub(source_params, dev_sub_key)
                     source_params.leaf(None, SOURCE_PARAM_TIMESTAMP, request_ts)
                     if schema_path is not None:
                         source_params.leaf(None, SOURCE_PARAM_SCHEMA_PATH, schema_path)
                     sinks.write(xnode, source_params)
        else:
            pass
            log.error("SUBSCRIBER netconf-get-poll POLL interrupted", None)

        curr_ts = time.monotonic()
        next_ts = last_ts.add(period)

        if next_ts < curr_ts:
            # Allow drift when reply arrived later than next period
            # TODO: Quantize to period?
            next_ts = curr_ts

        # log.info("  last_ts:", last_ts, None)
        # log.info("  curr_ts:", curr_ts, None)
        # log.info("  next_ts:", next_ts, None)

        delay = next_ts.since(curr_ts)
        log.debug("  ... delay " + str(delay.to_float()) + "s", None)
        after delay.to_float(): _do_get_request(seqno, next_ts)

    #def update_sinks(sink_updates: list[(Keypath, ?SubscriptionSink)]):
    def update_config(update: SubscriptionUpdate):
        sinks.update_added(update.sinks)

        __config = update.config
        if __config is not None:
            _config: SubscriptionSourceConfig = __config
            DelegateWorker_try_restart_inner(worker_state)
            log.debug("SUBSCRIBER netconf-get-poll CONFIG", {"_config": _config})

            poll = _config.config[SUBSCRIPTION_TYPE_KEY_GET_POLLER]
            path = poll[PTag('tlm', 'path')].try_str()
            period_ms = poll[PTag('tlm', 'period')].try_int()

            if path is not None:
                # TODO: Proper parsing into ptag-/key-path
                #_tag = schema.QName.netconf_to_value(path, None)
                _tag = QName.netconf_to_value(path, None)
                if _tag is not None:
                    _update_get_params(Keypath([_tag]), _config.schema_settings)

            if period_ms is not None and get_xml is not None:
                period = time.Duration(period_ms // 10**3, (period_ms % 10**3) * 10**15, time.MonotonicClock(0, 0, 0))
                log.debug("period: " + str(period.to_float()) + "s", None)
            else:
                pass # TODO: Indicate config error

        sinks.update_removed(update.sinks)

    def _update_get_params(get_path: Keypath, schema_settings: SchemaSettings):
        _get_xml: ?xml.Node = None
        _is_action = False
        _schema_path: ?SchemaPath = None

        cursor = schema.Cursor(_schema)
        if cursor.push_schema_path(SchemaPath([PTag('ncs', 'devices'), PTag('ncs', 'device')], [])):
            is_cursor_ok = False
            _get_path: list[(str, list[(?str,str)])] = []

            # NED-GET
            if cursor.push(PTag('ncs', 'live-status')):
                # Defaulting to device live-status ned-id unless explicitly set for subscription source
                if cursor.node().is_mount_point():
                    ned_id = schema_settings.live_status_ned_id
                    if ned_id is not None:
                        cursor.set_mount_id(ned_id)
                is_cursor_ok = True
                for _id in get_path:
                    if isinstance(_id, Tag) and not cursor.push(_id):
                        # TODO: print some error or something?
                        log.error("Invalid subscription path, bad node:", {"_id": _id})
                        is_cursor_ok = False
                        break

                    get_itag = cursor.lookup_itag(cursor.node().tag)
                    if get_itag is not None:
                        _ns: ?str = get_itag.ns
                        if _ns is not None:
                            _nsdef: (?str,str) = (None, _ns)
                            _get_path.append((get_itag.name, [_nsdef]))
                        else:
                            _get_path.append((get_itag.name, []))

            if is_cursor_ok:
                get_itag = cursor.lookup_itag(cursor.node().tag)
                if get_itag is not None:
                    get_name = get_itag.name
                    ns = get_itag.ns
                    nsdefs = [(None, ns)] if ns is not None else []
                    _filter_node: ?xml.Node = None
                    if len(_get_path) > 0:
                        for _itag in reversed(_get_path):
                            if _filter_node is not None:
                                _children = [_filter_node]
                            else:
                                _children = []

                            _filter_node = xml.Node(_itag.0, _itag.1, None, [], _children, None, None)

                        if _filter_node is not None:
                            _filter_node = xml.Node("filter", [], None, [], [_filter_node], None, None)

                    if _filter_node is not None:
                        _get_xml = xml.Node("get", [], None, [], [_filter_node], None, None)
                    else:
                        # TODO: this shoule be some form of error, right?
                        _get_xml = xml.Node("get", [], None, [], [], None, None)
                    _schema_path = cursor.get_schema_path()
                    # TODO: Configurable input params?

        get_xml = _get_xml
        schema_path = _schema_path

    def _start():
        log.debug("SUBSCRIBER netconf-get-poll START", None)
        log.debug("SUBSCRIBER netconf-get-poll GET_XML", {"get_xml": optional_str(get_xml, "None")})
        if get_xml is not None:
            curr_ts = time.monotonic()
            after 0: _do_get_request(poller_seqno, curr_ts)
        DelegateWorker_on_inner_started(worker_state)

    def _stop():
        log.debug("SUBSCRIBER netconf-get-poll STOP", None)

        # stop poller
        poller_seqno += 1

        # write RESET
        cleanup_payload = XTree(OP_NOCREATE, ITag.root(), None, []) # TODO
        source_params = tnode_root()
        source_params_try_append_dev_sub(source_params, dev_sub_key)
        source_params.leaf(None, SOURCE_PARAM_TIMESTAMP, time.time())
        if schema_path is not None:
            source_params.leaf(None, SOURCE_PARAM_SCHEMA_PATH, schema_path)
        source_params.leaf(None, SOURCE_PARAM_RESET, None)
        sinks.write(cleanup_payload, source_params, _on_sink_reset)

    def _on_sink_reset():
        log.trace("SUBSCRIBER netconf-get-poll SINK RESET DONE", None)
        DelegateWorker_on_inner_stopped(worker_state)

    def set_target_state(target_state: int):
        log.debug("SUBSCRIBER netconf-get-poll SET TARGET STATE", {"target_state": state_str(target_state)})
        if not DelegateWorker_set_target_state(worker_state, target_state):
            log.error("SUBSCRIBER netconf-get-poll UNEXPECTED STATE ignoring", {"target_state": state_str(target_state)})

    def on_reached_state(state: int):
        log.info("SUBSCRIBER netconf-get-poll REACHED STATE " + state_str(state), None)
        reached_state_cb(state)

    # Workaround compiler ordering issue
    worker_state._start_fn = _start
    worker_state._stop_fn = _stop
    worker_state._reached_state_cb = on_reached_state

