# Copyright (C) Deutsche Telekom AG
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import logging
import http
import net
import time
import xml

import telemetrify.net.netconf as netconf
import telemetrify.nsoapi.schema as schema

from telemetrify.common.mod import *
from telemetrify.common.utils import *
from telemetrify.nsoapi.schema import QName, SchemaPath
from telemetrify.main.common import *
from telemetrify.main.config import *
import telemetrify.vmanage.vmanage as vmanage

actor VManageSource(
        reached_state_cb: action(int) -> None,
        auth: WorldCap,
        shared_schema: schema.SharedSchema,
        log_handler: ?logging.Handler):

    var logh = logging.Handler("vmanage-source")
    if log_handler is not None:
        logh.set_handler(log_handler)

    var log = logging.Logger(logh)

    var config: TNode = tnode_empty()
    var client: ?vmanage.VManageHTTPClient = None
    var client_seqno: int = 0
    # var manager: DelegateMiddleManager[Subscriber] = DelegateMiddleManager(on_reached_state, _on_subscriber_reached_state_trampoline, _connect_client, _close_client)
    # Workaround compiler ordering issue
    var manager: DelegateMiddleManager[Subscriber] = DelegateMiddleManager(lambda s: None, lambda i, s: None, lambda: None, lambda: None)

    log.info("SOURCE vmanage CREATED", None)

    def update_config(source_update: ?TNode, subscription_updates: list[(Keypath, ?SubscriptionUpdate)]):
        log.debug("SOURCE vmanage CONFIG update", {"source_update": optional_str(source_update, "None")})
        log.debug("SOURCE vmanage SUBSCRIPTION update", {"subscription_updates": subscription_updates})

        restart = False

        if source_update is not None:
            config = source_update
            DelegateMiddleManager_try_restart_inner(manager)

        for dev_sub_key, sub_update in subscription_updates:
            if sub_update is not None:
                log.trace("SOURCE vmanage SUBSCRIPTION update", {"sub_update": sub_update})
                # sub = manager.try_get_delegate(dev_sub_key)
                sub = DelegateMiddleManager_try_get_delegate(manager, dev_sub_key) # https://github.com/actonlang/acton/issues/1448

                if sub is not None:
                    log.trace("SOURCE vmanage SUBSCRIPTION update exists", {"sub_update": sub_update})
                    sub.update_config(sub_update)
                else:
                    log.trace("SOURCE vmanage SUBSCRIPTION update is new", {"sub_update": sub_update})
                    new_sub = _create_subscriber(dev_sub_key, sub_update)
            else:
                # manager.remove_delegate(dev_sub_key)
                DelegateMiddleManager_remove_delegate(manager, dev_sub_key) # https://github.com/actonlang/acton/issues/1448

    def _create_subscriber(dev_sub_key: Keypath, sub_update: SubscriptionUpdate) -> Subscriber:
        sub_config = sub_update.config
        if sub_config is not None:
            _config = sub_config.config
            if _config[SUBSCRIPTION_TYPE_KEY_VMANAGE_POLLER].exists():
                # _id, reached_state_cb = manager.reserve_delegate(dev_sub_key)
                _id, _reached_state_cb = DelegateMiddleManager_reserve_delegate(manager, dev_sub_key) # https://github.com/actonlang/acton/issues/1448
                sub_act = VManagePollSubscription(self, dev_sub_key, _reached_state_cb, shared_schema, logh)
                sub = Subscriber(sub_act.set_target_state, sub_act.update_config)
                # manager.add_delegate(_id, sub)
                DelegateMiddleManager_add_delegate(manager, _id, sub, lambda s: s.update_config(sub_update)) # https://github.com/actonlang/acton/issues/1448
                return sub

        raise Exception("Broken invariant: Attempted to create subscriber from invalid config: " + optional_str(sub_config, "None"))

    def get(path: str, cb: action(?http.Response) -> None) -> None:
        if client is not None:
            def __callback(_c, n):
                cb(n)
            client.get(path, __callback)

    def _on_client_connect(c, seqno: int):
        if seqno != client_seqno:
            c.close()
            return
        DelegateMiddleManager_on_inner_started(manager)

    def _on_client_defunct(error_msg: str, seqno: int):
        if seqno != client_seqno:
            return
        _close_client()

        def _retry_client():
            if manager.target_state == STATE_RUNNING:
                _connect_client()

        # TODO: Configurable retry timer/backoff?
        after 1: _retry_client()

    def _connect_client():
        if client is not None:
            return

        address = config[PTag('tlm', 'address')].try_str()
        port = config[PTag('tlm', 'port')].try_int()
        username = config[PTag('tlm', 'username')].try_str()
        password = config[PTag('tlm', 'password')].try_str()

        log.debug("SOURCE vmanage CONNECT", {"address": optional_str(address, "None"), "port": optional_str(port, "None"), "username": optional_str(username, "None"), "password": optional_str(password, "None")})

        if address is not None and port is not None and \
                username is not None and password is not None:

            client_seqno += 1

            def __on_client_connect(c):
                _on_client_connect(c, client_seqno)
            #def __on_client_error(_c, e):
            #    _on_client_error(e, client_seqno)

            tcpccap = net.TCPConnectCap(net.TCPCap(net.NetCap(auth)))
            new_client = vmanage.VManageHTTPClient(tcpccap, address, port, username, password, __on_client_connect, logh)
            client = new_client

            # # <TEST>
            # def _pretend_connect():
            #     log.debug("SOURCE vmanage CONNECTED (pretending)", None)
            #     DelegateMiddleManager_on_inner_started(manager)
            # after 0: _pretend_connect()
            # # </TEST>

    def _close_client():
        log.debug("SOURCE vmanage DISCONNECT", None)

        _client = client
        if _client is not None:
            client_seqno += 1
            _client.close()
            client = None
        DelegateMiddleManager_on_inner_stopped(manager)

    def set_target_state(target_state: int):
        log.debug("SOURCE vmanage SET TARGET STATE", {"target_state": state_str(target_state)})
        if not DelegateMiddleManager_set_target_state(manager, target_state):
            log.error("SOURCE vmanage UNEXPECTED STATE ignoring", {"target_state": state_str(target_state)})

    def on_reached_state(state: int):
        log.info("SUBSCRIBER vmanage REACHED STATE " + state_str(state), None)
        reached_state_cb(state)

    def _on_subscriber_reached_state_trampoline(_id: DelegateId, state: int):
        # manager.on_delegate_reached_state(_id, state)
        DelegateMiddleManager_on_delegate_reached_state(manager, _id, state) # https://github.com/actonlang/acton/issues/1448

    # Workaround compiler ordering issue
    manager._start_fn = _connect_client
    manager._stop_fn = _close_client
    manager._reached_state_cb = on_reached_state
    manager._delegate_manager._on_delegate_reached_state_trampoline_fn = _on_subscriber_reached_state_trampoline


actor VManagePollSubscription(
        source: VManageSource,
        dev_sub_key: Keypath,
        reached_state_cb: action(int) -> None,
        shared_schema: schema.SharedSchema,
        log_handler: logging.Handler):

    var logh = logging.Handler("vmanage-poll-subscription")
    if log_handler is not None:
        logh.set_handler(log_handler)

    var log = logging.Logger(logh)

    _schema = schema.unsafe_get_shared_schema(shared_schema)
    sinks = SubscriptionSinkCollection()

    var poller_seqno: int = 0
    var poll_path: ?str = None
    var schema_path: ?SchemaPath = None
    var period: time.Duration = time.Duration(60, 0, time.MonotonicClock(0, 0, 0))

    # var worker_state = DelegateWorker(on_reached_state, _on_start, _on_stop)
    # Workaround compiler ordering issue
    var worker_state = DelegateWorker(lambda s: None, lambda: None, lambda: None)

    log.info("SUBSCRIBER vmanage-poll CREATED", None)

    def _do_poll(seqno: int, poll_ts: time.Instant):
        if seqno != poller_seqno:
            return

        if poll_path is not None:
            request_ts = time.time()
            url = "/dataservice" + poll_path
            source.get("/dataservice" + poll_path, lambda r: _on_poll_reply(seqno, poll_ts, request_ts, r))
            #try:
            #    source.get("/dataservice" + poll_path, lambda r: _on_poll_reply(seqno, poll_ts, request_ts, r))
            #except vmanage.NoConnError:
            #    after 1.0: _do_poll(seqno, next_ts)

            # # <TEST>
            # body = """{
            # "header": {
            #     "generatedOn": 1695290859047
            # },
            # "total_records": 2,
            # "data": [
            #     {
            #       "latency": 5,
            #       "dst_ip": "10.1.3.1",
            #       "src_ip": "10.1.1.1",
            #       "siteid": 228,
            #       "loss_percentage": 0,
            #       "jitter": 8,
            #       "name": "10.100.1.1:public-internet-10.100.3.1:public-internet",
            #       "host_name": "de-bsp-aachen-ce-3"
            #     },
            #     {
            #       "latency": 6,
            #       "dst_ip": "10.1.1.1",
            #       "src_ip": "10.1.3.1",
            #       "siteid": 230,
            #       "loss_percentage": 1.3,
            #       "jitter": 9,
            #       "name": "10.100.3.1:public-internet-10.100.1.1:public-internet",
            #       "host_name": "de-bsp-chemni-ce-2"
            #     }
            # ]
            # }""".encode()

            # response = http.Response(bytes([]), 200, {}, body)
            # after 0: _on_poll_reply(seqno, poll_ts, request_ts, response)
            # # </TEST>

    def _on_poll_reply(seqno: int, last_ts: time.Instant, request_ts: time.Instant, reply: ?http.Response):
        if seqno != poller_seqno:
            return

        if reply is not None:
            try:
                ar = reply.decode_json()
                ar_data = ar["data"]
                if isinstance(ar_data, list):
                    xnode = vmanage.approute_to_xnode(ar_data)
                    source_params = tnode_root()
                    source_params_try_append_dev_sub(source_params, dev_sub_key)
                    source_params.leaf(None, SOURCE_PARAM_TIMESTAMP, request_ts)
                    if schema_path is not None:
                        source_params.leaf(None, SOURCE_PARAM_SCHEMA_PATH, schema_path)
                    sinks.write(xnode, source_params)
            except Exception as exc:
                log.error("Exception", {"exception": exc})
                log.debug("Reply body", {"body": reply.body})

        _schedule_next_poll(seqno, last_ts)

    def _stop_cleanup():
        pass # TODO

    def _schedule_next_poll(seqno: int, last_ts: time.Instant):
        curr_ts = time.monotonic()
        next_ts = last_ts.add(period)

        if next_ts < curr_ts:
            # Allow drift when reply arrived later than next period
            # TODO: Quantize to period?
            next_ts = curr_ts

        # print("  last_ts:", last_ts)
        # print("  curr_ts:", curr_ts)
        # print("  next_ts:", next_ts)

        delay = next_ts.since(curr_ts)
        after delay.to_float(): _do_poll(seqno, next_ts)

    def update_config(update: SubscriptionUpdate):
        sinks.update_added(update.sinks) # Postpone removal of sinks for possible cleanup

        _config = update.config
        if _config is not None:
            DelegateWorker_try_restart_inner(worker_state)

            poll = _config.config[SUBSCRIPTION_TYPE_KEY_VMANAGE_POLLER]
            path = poll[PTag('tlm', 'path')].try_str()
            period_ms = poll[PTag('tlm', 'period')].try_int()

            if path is not None:
                poll_path = path
                # TODO: Proper parsing into ptag-/key-path
                #_tag = schema.QName.netconf_to_value(path, None)
                _tag = QName.netconf_to_value(path, None)
                if _tag is not None:
                    _update_schema_cursor(Keypath([_tag]), _config.schema_settings)

            if period_ms is not None and poll_path is not None:
                period = time.Duration(period_ms // 10**3, (period_ms % 10**3) * 10**15, time.MonotonicClock(0, 0, 0))

        sinks.update_removed(update.sinks) # Remove after possible sink cleanup

    def _update_schema_cursor(kpath: Keypath, schema_settings: SchemaSettings):
        cursor = schema.Cursor(_schema)
        if cursor.push_schema_path(SchemaPath([PTag('ncs', 'devices'), PTag('ncs', 'device')], [])):
            if cursor.push(PTag('ncs', 'live-status')): # TODO: Any benefit to using PTag('ncs', 'config') instead? All actions are duplicated right?
                # Defaulting to device live-status ned-id unless explicitly set for subscription source
                if cursor.node().is_mount_point():
                    ned_id = schema_settings.live_status_ned_id
                    if ned_id is not None:
                        cursor.set_mount_id(ned_id)
                schema_path = cursor.get_schema_path()

    def _start():
        if poll_path is not None:
            curr_ts = time.monotonic()
            after 0: _do_poll(poller_seqno, curr_ts)
        DelegateWorker_on_inner_started(worker_state)

    def _stop():
        # stop poller
        poller_seqno += 1

        # write RESET
        dummy_payload = XTree(OP_NOCREATE, ITag.root(), None, [])
        source_params = tnode_root()
        source_params_try_append_dev_sub(source_params, dev_sub_key)
        source_params.leaf(None, SOURCE_PARAM_TIMESTAMP, time.time())
        if schema_path is not None:
            source_params.leaf(None, SOURCE_PARAM_SCHEMA_PATH, schema_path)
        source_params.leaf(None, SOURCE_PARAM_RESET, None)
        sinks.write(dummy_payload, source_params, _on_sink_reset)

    def _on_sink_reset():
        log.trace("SUBSCRIBER vmanage-poll SINK RESET DONE", None)
        DelegateWorker_on_inner_stopped(worker_state)

    def set_target_state(target_state: int):
        log.debug("SUBSCRIBER vmanage-poll SET TARGET STATE", {"target_state": state_str(target_state)})
        if not DelegateWorker_set_target_state(worker_state, target_state):
            log.error("SUBSCRIBER vmanage-poll UNEXPECTED STATE ignoring", {"target_state": state_str(target_state)})

    def on_reached_state(state: int):
        log.info("SUBSCRIBER vmanage-poll REACHED STATE " + state_str(state), None)
        reached_state_cb(state)

    # Workaround compiler ordering issue
    worker_state._start_fn = _start
    worker_state._stop_fn = _stop
    worker_state._reached_state_cb = on_reached_state
