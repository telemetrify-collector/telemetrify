# Copyright (C) Deutsche Telekom AG
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import logging
import http
import net
import time
import xml

import telemetrify.nsoapi.schema as schema

from telemetrify.common.mod import *
from telemetrify.common.utils import *
from telemetrify.nsoapi.schema import QName, SchemaPath
from telemetrify.main.common import *
from telemetrify.main.config import *
import telemetrify.vmanage.vmanage as vmanage

class VManageSource(Source):
    @property
    get_fn: action(path: str, cb: action(?http.Response) -> None) -> None

    def __init__(
            self,
            uid: int,
            attach_fn: action(int, action(int, int) -> None) -> None,
            detach_fn: action(int) -> None,
            close_fn: action() -> None,
            get_fn: action(path: str, cb: action(?http.Response) -> None) -> None):

        Source.__init__(self, uid, attach_fn, detach_fn, close_fn)
        self.get_fn = get_fn

    def get(self, path: str, cb: action(?http.Response) -> None) -> None:
        self.get_fn(path, cb)

def create_vmanage_source(uid: int, config: TNode, auth: WorldCap, shared_schema: schema.SharedSchema, log_handler: logging.Handler) -> VManageSource:
    source_act = VManageSourceAct(uid, config, auth, shared_schema, log_handler)
    return VManageSource(uid, source_act.attach, source_act.detach, source_act.close, source_act.get)

actor VManageSourceAct(
        uid: int,
        config: TNode,
        auth: WorldCap,
        shared_schema: schema.SharedSchema,
        log_handler: logging.Handler):

    var logh = logging.Handler("vmanage-source")
    if log_handler is not None:
        logh.set_handler(log_handler)

    var log = logging.Logger(logh)

    # Workaround compiler ordering issue
    #var server = ServerMixin(uid, _on_server_closed)
    var server = ServerMixin(uid, lambda: None)

    # var config: TNode = tnode_empty()
    var client: ?vmanage.VManageHTTPClient = None
    var client_seqno: int = 0

    def attach(client_uid: int, state_cb: action(int, int) -> None):
        server.attach(client_uid, state_cb)

    def detach(client_uid: int):
        server.detach(client_uid)

    def close():
        server.on_closing()

    def get(path: str, cb: action(?http.Response) -> None) -> None:
        if client is not None:
            def __callback(_c, n):
                cb(n)
            client.get(path, __callback)

    def _on_client_connect(c, seqno: int):
        if seqno != client_seqno:
            c.close()
            return
        log.debug("SOURCE vmanage CONNECTED", None)
        server.on_started()

    def _on_client_defunct(error_msg: str, seqno: int):
        if seqno != client_seqno:
            return
        _close_client()

        # TODO: Configurable retry timer/backoff?
        after 1: _connect_client()

    def _on_server_closed():
        _close_client()

    def _connect_client():
        if client is not None:
            return

        address = config[PTag('tlm', 'address')].try_str()
        port = config[PTag('tlm', 'port')].try_int()
        username = config[PTag('tlm', 'username')].try_str()
        password = config[PTag('tlm', 'password')].try_str()

        log.debug("SOURCE vmanage CONNECT", {"address": optional_str(address, "None"), "port": optional_str(port, "None"), "username": optional_str(username, "None"), "password": optional_str(password, "None")})

        if address is not None and port is not None and \
                username is not None and password is not None:

            client_seqno += 1

            def __on_client_connect(c):
                _on_client_connect(c, client_seqno)
            #def __on_client_error(_c, e):
            #    _on_client_error(e, client_seqno)

            tcpccap = net.TCPConnectCap(net.TCPCap(net.NetCap(auth)))
            new_client = vmanage.VManageHTTPClient(tcpccap, address, port, username, password, __on_client_connect, logh)
            client = new_client

    def _close_client():
        log.debug("SOURCE vmanage DISCONNECT", None)
        _client = client
        if _client is not None:
            client_seqno += 1
            _client.close()
            client = None
        server.on_stopped()

    # Workaround compiler ordering issue
    server.on_closed = _on_server_closed

    log.info("SOURCE vmanage CREATED", None)

    _connect_client()
