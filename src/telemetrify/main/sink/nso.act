import logging
import time
import xml

import telemetrify.nso.writer
import telemetrify.nsoapi.maapi
import telemetrify.nsoapi.schema as schema

from telemetrify.common.mod import *
from telemetrify.common.utils import *
from telemetrify.nso.writer import *
from telemetrify.nsoapi.maapi import *
from telemetrify.main.config import *

actor NsoCdbSink(env: Env, config: TNode, shared_schema: schema.SharedSchema, log_handler: logging.Handler):
    var logh = logging.Handler("nso-cdb-sink")
    if log_handler is not None:
        logh.set_handler(log_handler)

    var log = logging.Logger(logh)

    var maapi_connection: ?telemetrify.nsoapi.maapi.MaapiConnection = None
    var writer: ?telemetrify.nso.writer.MaapiWriter = None

    var tasks: Wardrobe[(Node, TNode, TNode)] = Wardrobe() # (node, source_params, sink_config)

    log.info("SINK nso-cdb CREATED", None)

    def write(node: Node, source_params: TNode, sink_config: TNode) -> None:
        m = maapi_connection
        w = writer
        if m is not None and w is not None:
            task_id = tasks.put((node, source_params, sink_config))
            m.start_trans(DB_OPERATIONAL, MODE_READ_WRITE, UserIdentity(None, None, None, None), lambda c, t: _on_start_trans(c, t, task_id))
        else:
            # TODO:
            # Buffer until (re-)connected or signal connection upwards for possible source subscription sync?
            pass

    def _on_start_trans(_m, txn_handle, task_id):
        if isinstance(txn_handle, int):
            log.debug("SINK nso-cdb MAAPI started transaction", {"txn_handle": txn_handle})
            w = writer
            if w is not None:
                try:
                    node, source_params, sink_config = tasks.borrow(task_id)
                except Exception:
                    pass
                else:
                    w.write(node, txn_handle, False, lambda e: _on_write(e, txn_handle, task_id))
        else:
            log.error("SINK nso-cdb MAAPI start transaction failed:", {"txn_handle": txn_handle})

    def _on_write(e: ?Exception, txn_handle: int, task_id: int):
        if e is not None:
            log.error("SINK nso-cdb MAAPI write txn_handle failed:", {"txn_handle": txn_handle, "exception": e})
        m = maapi_connection
        if m is not None:
            m.apply_trans(txn_handle, False, 0, lambda _c, e: _on_apply_trans(e, txn_handle, task_id))

    def _on_apply_trans(e: ?Exception, txn_handle: int, task_id: int):
        if e is not None:
            log.error("SINK nso-cdb MAAPI apply transaction failed:", {"txn_handle": txn_handle, "exception": e})
        m = maapi_connection
        if m is not None:
            m.finish_trans(txn_handle, lambda _c, e: _on_finish_trans(e, txn_handle, task_id))

    def _on_finish_trans(e: ?Exception, txn_handle: int, task_id: int):
        if e is not None:
            log.error("SINK nso-cdb MAAPI finish transaction failed:", {"txn_handle": txn_handle, "exception": e})
        else:
            log.debug("SINK nso-cdb WRITE DONE", None)
        try:
            tasks.discard(task_id)
        except Exception:
            pass

    def _on_maapi_connect(_m: MaapiConnection):
        log.info("SINK nso-cdb MAAPI connect complete", None)
        m = maapi_connection
        if m is not None:
            m.start_user_session(UserSessionDescription("admin", "127.0.0.1", "system", [], None, False, UserIdentity(None, None, None, None)), _on_user_session)

    def _on_user_session(c, e):
        m = maapi_connection
        if m is not None:
            writer = telemetrify.nso.writer.MaapiWriter(m, shared_schema, logh)

    def _on_maapi_connect_error(e):
        log.error("SINK nso-cdb MAAPI connect failed:", {"error": e})
        # TODO: retry? We should probably panic/exit/crash if we don't have a local NSO

    def close():
        _writer = writer
        if _writer is not None:
            # TODO
            # _writer.close()
            _writer = None
        _maapi_connection = maapi_connection
        if _maapi_connection is not None:
            _maapi_connection.close()
            maapi_connection = None
        tasks.clear()
        log.info("SINK nso-cdb CLOSED", None)

    maapi_connection = telemetrify.nsoapi.maapi.MaapiConnection(env, 4569, _on_maapi_connect, _on_maapi_connect_error, logh, None)
