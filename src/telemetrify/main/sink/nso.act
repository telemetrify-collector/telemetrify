# Copyright (C) Deutsche Telekom AG
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import logging
import time
import xml

import telemetrify.nso.writer
import telemetrify.nsoapi.maapi
import telemetrify.nsoapi.schema as schema

from telemetrify.common.mod import *
from telemetrify.common.utils import *
from telemetrify.nso.writer import *
from telemetrify.nsoapi.maapi import *
from telemetrify.main.common import *

actor NsoCdbSink(env: Env, config: TNode, shared_schema: schema.SharedSchema, log_handler: logging.Handler):
    var logh = logging.Handler("nso-cdb-sink")
    if log_handler is not None:
        logh.set_handler(log_handler)

    var log = logging.Logger(logh)

    var maapi_connection: ?telemetrify.nsoapi.maapi.MaapiConnection = None
    var writer: ?telemetrify.nso.writer.MaapiWriter = None

    var tasks: Wardrobe[(Node, TNode, TNode, ?action() -> None)] = Wardrobe() # (node, source_params, sink_config, done_cb)
    var state = STATE_STARTING

    log.info("SINK nso-cdb CREATED", None)

    def write(node: Node, source_params: TNode, sink_config: TNode, done_cb: ?action() -> None) -> None:
        if state != STATE_CLOSED:
            task_id = tasks.put((node, source_params, sink_config, done_cb))
            # We want to buffer messages when outputing to a stateful sink that is not yet initialized.
            # Depend on timely connect/init success/failure response from local maapi.
            if state == STATE_RUNNING:
                _run_task(task_id)
        else:
            if done_cb is not None:
                done_cb() # TODO: Pass along ClosedException?

    def _run_task(task_id: int):
        m = maapi_connection
        if m is not None:
            m.start_trans(DB_OPERATIONAL, MODE_READ_WRITE, UserIdentity(None, None, None, None), lambda c, t: _on_start_trans(c, t, task_id))
        else:
            _complete_task(task_id)

    def _on_running():
        state = STATE_RUNNING
        for task_id in tasks.get_tickets():
            _run_task(task_id)

    def _on_start_trans(_m, txn_handle, task_id):
        if isinstance(txn_handle, int):
            log.debug("SINK nso-cdb MAAPI started transaction", {"txn_handle": txn_handle})
            w = writer
            if w is not None:
                try:
                    node, source_params, sink_config, _done_cb = tasks.borrow(task_id)
                except KeyError:
                    pass
                else:
                    w.write(node, txn_handle, False, lambda e: _on_write(e, txn_handle, task_id))
                    return
        else:
            log.error("SINK nso-cdb MAAPI start transaction failed:", {"txn_handle": txn_handle})
        _complete_task(task_id)

    def _on_write(e: ?Exception, txn_handle: int, task_id: int):
        if e is not None:
            log.error("SINK nso-cdb MAAPI write txn_handle failed:", {"txn_handle": txn_handle, "exception": e})
        m = maapi_connection
        if m is not None:
            m.apply_trans(txn_handle, False, 0, lambda _c, e: _on_apply_trans(e, txn_handle, task_id))
            return
        _complete_task(task_id)

    def _on_apply_trans(e: ?Exception, txn_handle: int, task_id: int):
        if e is not None:
            log.error("SINK nso-cdb MAAPI apply transaction failed:", {"txn_handle": txn_handle, "exception": e})
        m = maapi_connection
        if m is not None:
            m.finish_trans(txn_handle, lambda _c, e: _on_finish_trans(e, txn_handle, task_id))
            return
        _complete_task(task_id)

    def _on_finish_trans(e: ?Exception, txn_handle: int, task_id: int):
        if e is not None:
            log.error("SINK nso-cdb MAAPI finish transaction failed:", {"txn_handle": txn_handle, "exception": e})
        else:
            log.debug("SINK nso-cdb WRITE DONE", None)
        _complete_task(task_id)

    def _on_maapi_connect(_m: MaapiConnection):
        log.info("SINK nso-cdb MAAPI connect complete", None)
        m = maapi_connection
        if m is not None:
            m.start_user_session(UserSessionDescription("admin", "127.0.0.1", "system", [], None, False, UserIdentity(None, None, None, None)), _on_user_session)
            return
        _close()

    def _on_user_session(c, e):
        m = maapi_connection
        if m is not None:
            writer = telemetrify.nso.writer.MaapiWriter(m, shared_schema, logh)
            _on_running()
            return
        _close()
        # TODO: retry?

    def _on_maapi_connect_error(e):
        log.error("SINK nso-cdb MAAPI connect failed CLOSING", {"error": e})
        _close()
        # TODO: retry?

    def _complete_task(task_id: int):
        try:
            _node, _source_params, _sink_config, done_cb = tasks.pop(task_id)
        except KeyError:
            pass
        else:
            if done_cb is not None:
                done_cb()

    def _complete_tasks():
        for _task_id, (_node, _source_params, _sink_config, done_cb) in tasks.pop_all():
            if done_cb is not None:
                done_cb()

    def close():
        _close()

    def _close():
        _complete_tasks()
        if state != STATE_CLOSED:
            state = STATE_CLOSED
            _writer = writer
            if _writer is not None:
                _writer = None
            _maapi_connection = maapi_connection
            if _maapi_connection is not None:
                _maapi_connection.close()
                maapi_connection = None
            tasks.clear()
            log.info("SINK nso-cdb CLOSED", None)

    # TODO: When we have destructors support in acton
    def __del__():
        _close()

    maapi_connection = telemetrify.nsoapi.maapi.MaapiConnection(env, 4569, _on_maapi_connect, _on_maapi_connect_error, logh, None)
