# Copyright (C) Deutsche Telekom AG
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

from telemetrify.common.io import IncompleteReadError
from telemetrify.nsoapi.proto import *
from telemetrify.nsoapi.conf import *
from telemetrify.common.utils import *

CLIENT_PROTO_VSN = 81
CLIENT_CONF_VSN = 0x08010000

IA_CLIENT_CDB = 5
IA_CLIENT_MAAPI = 7

def read_response(reader: BufferReader, op: ?int, read_op: bool) -> ?value: # (ConfResponse | IncompleteReadError)
    result = ConfResponse(op if op is not None else -1, None, False, 0, None)
    retval: ?value = result
    _response_len = reader.read_i32_be()
    if isinstance(_response_len, int):
        response_len: int = _response_len
        #print("Recv cdb response len:", response_len)
        expected_len = response_len + 4
        e = reader.assert_unread_bytes(response_len)
        if isinstance(e, IncompleteReadError):
            return e
        e2 = __read_response_content(reader, read_op, result, expected_len)
        if e2 is not None:
            if isinstance(e2, IncompleteReadError):
                return e2
            retval = e2
        else:
            read_len = reader.read_bytes_count()
            if read_len != expected_len:
                print("WARNING: Inconsistent length of MAAPI response, expected:", expected_len, ", actual:", read_len)

    else:
        if isinstance(_response_len, IncompleteReadError):
            return _response_len
        retval = _response_len
    return retval

def __read_response_content(reader: BufferReader, read_op: bool, result, expected_len: int) -> ?value:
    if not read_op:
        return __read_response_term(reader, result)
    else:
        _res_op = reader.read_u32_be()
        if isinstance(_res_op, int):
            result.op = _res_op
            #if result.op & CDB_ERROR_FLAG_MASK != 0: # BUG: Runtime error on bitwise operations
            if (result.op // CDB_ERROR_FLAG_MASK) % 2 == 1:
                result.is_error = True
                _error_code = reader.read_i32_be()
                if isinstance(_error_code, int):
                    result.error_code = _error_code
                    _error_obj = EObject.decode_tagged(reader)
                    if isinstance(_error_obj, EObject):
                        if isinstance(_error_obj, EBinary):
                            #result.error_msg = str(_error_obj)
                            result.error_msg = str(_error_obj)
                        elif isinstance(_error_obj, ETuple):
                            # {String, AppTag} ?
                            if len(_error_obj.elems) >= 1:
                                e = _error_obj.elems[0]
                                if isinstance(e, EBinary):
                                    #result.error_msg = str(e)
                                    result.error_msg = str(e)
                        else:
                            result.error_msg = str(_error_obj)
                        return
                    else:
                        return _error_obj
                else:
                    return _error_code
            else:
                if reader.read_bytes_count() < expected_len:
                    return __read_response_term(reader, result)
                else:
                    return
        else:
            return _res_op
        return

def __read_response_term(reader: BufferReader, result: ConfResponse) -> ?value:
    # _response = EObject.decode_tagged(input_stream)
    _response = EObject.decode_tagged(reader)
    if isinstance(_response, EObject):
        result.term = _response
    else:
        return _response
