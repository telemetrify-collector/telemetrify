# Copyright (C) Deutsche Telekom AG
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import telemetrify.nsoapi.schema as schema
from telemetrify.common.mod import *
from telemetrify.common.utils import *
from telemetrify.nsoapi.conf import *
from telemetrify.nsoapi.proto import *
from telemetrify.nsoapi.schema import BasicTag, Cursor, Schema, Any

def key_to_eobject(key: Key, cursor: Cursor, use_ikp: bool) -> ?EObject:
    s_node = cursor.node()
    key_nodes = s_node.keys
    key_nodes_len = len(key_nodes)
    if len(key) != key_nodes_len:
        return None
    ekey_elems: list[EObject] = []
    for i in range(0, key_nodes_len, 1):
        _type = s_node.value_type
        if _type is not None:
            ekey_elem = _type.value_to_eobject(key[i], cursor, use_ikp)
            if ekey_elem is not None:
                ekey_elems.append(ekey_elem)
            else:
                return None
        else:
            return None
    return ETuple(ekey_elems)

def keypath_to_ekeypath(kp: Keypath, cursor: Cursor, use_ikp: bool) -> ?EKeypath:
    res: list[EObject] = []

    # TODO: Support mount-points.
    for p in kp:
        if isinstance(p, Tag):
            if not cursor.push(p):
                return None
            etag = BasicTag.value_to_eobject(p, cursor, use_ikp)
            if etag is not None:
                res.append(etag)
            else:
                return None
        elif isinstance(p, Key):
            if not p.is_wildcard():
                ekey = key_to_eobject(p, cursor, use_ikp)
                if ekey is not None:
                    res.append(ekey)
                else:
                    return None
        else:
            return None

    return EKeypath(res)

#

def _parse_etag(etv: EObject) -> (?Tag, ?EObject):
    if isinstance(etv, ETuple) and len(etv) == 2:
        tag: ?Tag = None
        _etag = etv[0]
        _eval = etv[1]
        if isinstance(_etag, EList) and len(_etag) == 2:
            _ns = _etag[0]
            _name = _etag[1]
            if isinstance(_ns, EInt) and isinstance(_name, EInt):
                tag = HTag(_ns.val, _name.val)
            elif isinstance(_ns, EAtom) and isinstance(_name, EAtom):
                tag = PTag(str(_ns), str(_name))
        elif isinstance(_etag, EAtom):
            tag = PTag(None, str(_etag))
        elif isinstance(_etag, EInt):
            tag = HTag(0, _etag.val)
        return (tag, _eval)
    return (None, None)

def _get_key_from_etagvals(etagvals: list[EObject], index: int, _len: int, cursor: Cursor) -> Key:
    key_elems: list[value] = []
    key_s_nodes = cursor.node().keys
    if len(key_s_nodes) > _len - index:
        raise ValueError("Not enough keys left")
    for key_s_node in key_s_nodes:
        etv: EObject = etagvals[index]
        _tag: ?Tag, _eval: ?EObject = _parse_etag(etv)
        if _tag is not None and cursor.push(_tag):
            htag = cursor.node().tag
            _conf_type: int, val: ?value = Any.eobject_to_conf_type_and_value(_eval, cursor)
            if htag == key_s_node.tag:
                if val is not None:
                    key_elems.append(val)
                else:
                    raise ValueError("Key value is None") # TODO: Show position indication
            else:
                raise ValueError("Missmatching key tag") # TODO: Show position indication
            cursor.pop()
        else:
            raise ValueError("Missing key tag") # TODO: Show position indication
        index += 1
    return Key(key_elems)

def _get_marker_conf_type(v: ?EObject) -> int:
    if isinstance(v, EAtom):
        _s = v.val
        if _s == _EV_NOEXISTS:
            return C_NOEXISTS
        elif _s == _EV_LEAF:
            return C_LEAF
        elif _s == _EV_START:
            return C_START
        elif _s == _EV_STOP:
            return C_STOP
        elif _s == _EV_DELETE:
            return C_DELETE
    return C_UNKNOWN

def etagvals_to_merge_ttree(etagvallist: EList, cursor: Cursor) -> TTree:
    root = TTree(OP_MERGE, PTag.root(), None, {})
    path: list[TNode] = [root]

    etagvals: list[EObject] = etagvallist.elems
    etagvals_len = len(etagvals)

    i = 0

    while i < etagvals_len:
        etv: EObject = etagvals[i]
        tag, _eval = _parse_etag(etv)
        if tag is not None:
            ptag: ?PTag = cursor.lookup_ptag(tag)
            if ptag is not None:
                marker_conf_type = _get_marker_conf_type(_eval)

                if marker_conf_type == C_STOP:
                    s_node = cursor.node()
                    if not cursor.pop_verify(tag):
                        raise ValueError("Unexpected etagval stop for: " + str(tag)) # TODO: Show full path
                    if s_node.is_container():
                        list_try_pop(path) # Tag
                    elif s_node.is_list():
                        list_try_pop(path) # Key
                        list_try_pop(path) # Tag
                    else:
                        raise ValueError("C_STOP on non-list/container")
                else:
                    if not cursor.push(tag):
                        raise ValueError("Tag not found in schema: " + str(tag)) # TODO: Show full path

                    s_node = cursor.node()

                    if marker_conf_type == C_NOEXISTS:
                        if s_node.is_leaf():
                            path[-1].leaf(OP_DELETE, ptag, None)
                        elif s_node.is_container() or s_node.is_leaf_list():
                            path[-1].tree(OP_DELETE, ptag)
                        else:
                            raise ValueError("C_NOEXISTS on non-leaf/leaf-list/container")
                        cursor.pop()
                    elif marker_conf_type == C_LEAF: # elif conf_type in [C_LEAF, C_XML]:
                        if s_node.is_empty_leaf():
                            path[-1].leaf(OP_MERGE, ptag, None)
                        else:
                            raise ValueError("Unexpected conf_type for non-empty-leaf: " + str(marker_conf_type))
                        cursor.pop()
                    elif marker_conf_type == C_START:
                        if s_node.is_list():
                            key = _get_key_from_etagvals(etagvals, i+1, etagvals_len, cursor)
                            path.append(path[-1].tree(OP_MERGE, ptag))
                            path.append(path[-1].tree(OP_MERGE, key))
                        elif s_node.is_container():
                            path.append(path[-1].tree(OP_MERGE, ptag))
                        else:
                            raise ValueError("C_START on non-list/container")
                    elif marker_conf_type == C_DELETE:
                        if s_node.is_list():
                            key = _get_key_from_etagvals(etagvals, i+1, etagvals_len, cursor)
                            # Won't need these key leafs anymore
                            i += len(key)
                            path.append(path[-1].tree(OP_NOCREATE, ptag))
                            path.append(path[-1].tree(OP_DELETE, key))
                        else:
                            raise ValueError("C_DELETE on non-list")
                    else:
                        value_conf_type, val = Any.eobject_to_conf_type_and_value(_eval, cursor)
                        if value_conf_type == C_LIST:
                            if s_node.is_leaf_list():
                                if isinstance(val, list):
                                    leaf_list = path[-1].tree(OP_REPLACE, ptag)
                                    for elem in val:
                                        leaf_list.leaf_elem(OP_MERGE, elem)
                                else:
                                    raise ValueError("C_LIST without list-value")
                            else:
                                raise ValueError("C_LIST on non-leaf-list")
                        else:
                            if s_node.is_non_empty_leaf():
                                path[-1].leaf(OP_MERGE, ptag, val)
                            else:
                                raise ValueError("Unexpected conf_type for non-empty-leaf: " + str(value_conf_type))
                        cursor.pop()
            else:
                raise ValueError("Unable to get ptag for: " + str(tag))
        else:
            raise ValueError("Invalid etagval element: " + str(etv))
        i += 1

    return root
