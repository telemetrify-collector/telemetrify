# Copyright (C) Deutsche Telekom AG
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import file
import net
import time
import random
import logging
import tsdb.http
import tsdb.common
import tsdb.m3
import tsdb.prometheus

_OPT_RECORD_TO = '--record-to'

_OPTS_HELP: dict[str, str] = {
    _OPT_RECORD_TO: _OPT_RECORD_TO + " <filename>",
}

class Opts(object):
    @property
    record_to: ?file.WriteFile

    def __init__(self):
        self.record_to = None

    def parse(self, env: Env, cmd: str, opts: list[str]) -> bool:
        opts_len = len(opts)
        i = 0
        # while i < opts_len:
        # Workaround actonc: Name i is not in scope
        while True:
            if i >= opts_len:
                break
            opt = opts[i]
            if opt == _OPT_RECORD_TO:
                i += 1
                if i >= opts_len:
                    return False
                filepath: str = opts[i]
                _record_to: ?file.WriteFile = file.WriteFile(file.WriteFileCap(file.FileCap(env.auth)), filepath)
                self.record_to = _record_to
            else:
                return False
            i += 1
        return True

actor main(env):
    tests: dict[str, proc(Env, Opts) -> None] = {
    }

    args = env.argv
    path: str = args[0]

    logh = logging.Handler("tsdb.test")

    logh.set_output_level(logging.DEBUG)
    logh.add_sink(logging.StdoutSink())

    #def print_help_and_exit():
    #    print("usage:", path.split("/", -1)[-1], "[ " + " | ".join(tests.keys()) + " ] [ " + " | ".join(_OPTS_HELP.values()) + " ]")
    #    await async env.exit(1)

    #if len(args) >= 2:
    #    cmd: str = args[1]
    #    if cmd in tests:
    #        opts = Opts()
    #        if not opts.parse(env, cmd, args[2:]):
    #            print_help_and_exit()
    #        t = tests[cmd]
    #        t(env, opts)
    #    else:
    #        print_help_and_exit()
    #else:
    #    print_help_and_exit()

    #var reconnects = 0
    #var outstanding = 0
    #var count = 0

    def on_m3_response(conn: tsdb.m3.Client, success: bool):
        if success:
            print("M3 metric delivered successfully")
        else:
            print("Error sending M3 metric")

    def on_prom_response(conn: tsdb.prometheus.Client, success: bool, send_start: time.Instant):
        send_end = time.time()
        print("Prometheus send time: ", send_end.since(send_start).str_ms(), " ms")
        if success:
            print("Prometheus metric delivered successfully")
        else:
            print("Error sending Prometheus metric")

    #def request_some(conn, n):
    #    for i in range(0, n, 1):
    #        conn.get("/" + str(i), on_response)
    #        outstanding += 1

    def on_m3_connect(conn):
        print("Connected")

    def on_m3_error(conn, err):
        print("Error: " + err)

    def on_prom_connect(conn):
        print("Connected")

    def on_prom_error(conn, err):
        print("Error: " + err)

    listen_auth = net.TCPConnectCap(net.TCPCap(net.NetCap(env.auth)))
    m3 = tsdb.m3.Client(listen_auth, "127.0.0.1", 7201, on_m3_connect, on_m3_error, None)
    prometheus = tsdb.prometheus.Client(listen_auth, "127.0.0.1", 7201, "/api/v1/prom/remote/write", on_prom_connect, on_prom_error, logh)

    def on_init_response(conn: tsdb.m3.Client, success: bool):
        print("Init response received: ", str(success))

    m3.quick_init(on_init_response)

    metrics = []
    def prom_metrics(i: int) -> bool:
        if i == 0:
            return True

        fake_ping = float(random.randint(10, 40))

        print("metric = tsdb.common.Metric(\"fake_ping\", {\"id\": \"prom\"}, fake_ping)")
        metric = tsdb.common.Metric("fake_ping", {"id": "prom"}, fake_ping, time.time().second)
        metrics.append(metric)

        after 1: prom_metrics(i - 1)
        return True

    def send_prom():
        print("prometheus.send_metrics(", metrics, ", ", on_prom_response, ")")
        prom_send_start = time.time()
        prometheus.send_metrics(metrics, lambda x, y: on_prom_response(x, y, prom_send_start))

    bar = prom_metrics(20)
    after 20: send_prom()

    def metric_iters(i: int) -> bool:
        if i == 0:
            return True

        fake_ping = float(random.randint(10, 40))

        print("metric = tsdb.common.Metric(\"fake_ping\", {\"id\": \"m3-http\"}, fake_ping)")
        metric = tsdb.common.Metric("fake_ping", {"id": "m3-http"}, fake_ping, time.time().second)
        print("m3.send_metric(", metric, ", ", on_m3_response, ")")
        m3.send_metric(metric, on_m3_response)

        after 1: metric_iters(i - 1)
        return True

    foo = metric_iters(20)
    print(str(foo))

    def exit():
        await async env.exit(0)

    after 25: exit()
    
