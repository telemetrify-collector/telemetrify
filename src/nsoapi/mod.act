from nsoapi.conf import Tag

OP_NONE: int = 0
OP_MERGE: int = 1
OP_REPLACE: int = 2
OP_DELETE: int = 3
OP_NOCREATE: int = 4
# OP_MOVE = 5 # Additional key values
# OP_INSERT = 6 # Additional key values

class Node:
    def op(self) -> int:
        return OP_NONE

    def tag(self) -> ?Tag:
        return None

    def namespaces(self) -> ?(?str) -> ?str:
        return None

    def keys(self) -> list[Node]:
        return []

    def value(self) -> ?value:
        return None

    def children(self) -> list[Node]:
        return []

    def new_instance(self, op: int, tag: ?Tag, namespaces: ?(?str) -> ?str, keys: list[Node], value: ?value, children: list[Node]) -> Node:
        raise Exception("Not implemented")

class XNode(Node):
    @property
    _op: int
    @property
    _tag: ?Tag
    @property
    _namespaces: ?(?str) -> ?str

    # def __init__(self, tag: ?Tag, namespaces: ?(?str) -> ?str):
    #     self._tag = tag
    #     self._namespaces = namespaces

    def op(self) -> int:
        return self._op

    def tag(self) -> ?Tag:
        return self._tag

    def namespaces(self) -> ?(?str) -> ?str:
        return self._namespaces

class XTree(XNode):
    @property
    _children: list[Node]

    def __init__(self, op: int, tag: ?Tag, namespaces: ?(?str) -> ?str, children: list[Node]):
        self._op = op
        self._tag = tag
        self._namespaces = namespaces
        self._children = children

    def children(self) -> list[Node]:
        return self._children

    def new_instance(self, op: int, tag: ?Tag, namespaces: ?(?str) -> ?str, keys: list[Node], value: ?value, children: list[Node]) -> Node:
        if keys:
            raise ValueError("XTree does not allow keys")
        if value is not None:
            raise ValueError("XTree does not allow value")
        return XTree(op, tag, namespaces, children)

class XLeaf(XNode):
    @property
    _value: ?value

    def __init__(self, op: int, tag: ?Tag, namespaces: ?(?str) -> ?str, value: ?value):
        self._op = op
        self._tag = tag
        self._namespaces = namespaces
        self._value = value

    def value(self) -> ?value:
        return self._value

    def new_instance(self, op: int, tag: ?Tag, namespaces: ?(?str) -> ?str, keys: list[Node], value: ?value, children: list[Node]) -> Node:
        if keys:
            raise ValueError("XTree does not allow keys")
        if children:
            raise ValueError("XTree does not allow children")
        return XLeaf(op, tag, namespaces, value)
