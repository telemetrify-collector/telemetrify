import file
import nsoapi.maapi
from nsoapi.conf import *
from nsoapi.maapi import *
from nsoapi.proto import *
from nsoapi.schema import *

_OPT_RECORD_TO = '--record-to'

_OPTS_HELP: dict[str, str] = {
    _OPT_RECORD_TO: _OPT_RECORD_TO + " <filename>",
}

class Opts(object):
    @property
    record_to: ?file.WriteFile

    def __init__(self):
        self.record_to = None

    def parse(self, env: Env, cmd: str, opts: list[str]) -> bool:
        opts_len = len(opts)
        i = 0
        # while i < opts_len:
        # Workaround actonc: Name i is not in scope
        while True:
            if i >= opts_len:
                break
            opt = opts[i]
            if opt == _OPT_RECORD_TO:
                i += 1
                if i >= opts_len:
                    return False
                filepath: str = opts[i]
                _record_to: ?file.WriteFile = file.WriteFile(file.WriteFileAuth(file.FileAuth(env.auth)), filepath)
                self.record_to = _record_to
            else:
                return False
            i += 1
        return True

actor main(env):
    def run_test_maapi_session_schema(env: Env, opts: Opts):
        test_maapi_session_schema(env, opts)

    def run_test_maapi_transaction_set_values(env: Env, opts: Opts):
        test_maapi_transaction_set_values(env, opts)

    tests: dict[str, proc(Env, Opts) -> None] = {
        "maapi-schema": run_test_maapi_session_schema,
        "maapi-transaction-set-values": run_test_maapi_transaction_set_values,
    }

    args = env.argv
    path: str = args[0]

    def print_help_and_exit():
        print("usage:", path.split("/", -1)[-1], "[ " + " | ".join(tests.keys()) + " ] [ " + " | ".join(_OPTS_HELP.values()) + " ]")
        await async env.exit(1)

    if len(args) >= 2:
        cmd: str = args[1]
        if cmd in tests:
            opts = Opts()
            if not opts.parse(env, cmd, args[2:]):
                print_help_and_exit()
            t = tests[cmd]
            t(env, opts)
        else:
            print_help_and_exit()
    else:
        print_help_and_exit()

actor test_maapi_session_schema(env: Env, opts: Opts):
    def _on_connect_error(e):
        print("MAAPI connect failed:", e)

    def _on_connect(c):
        print("MAAPI connected!!!!")
        c.start_user_session(UserSessionDescription("admin", "127.0.0.1", "system", [], None, True, UserIdentity(None, None, None, None)), _on_user_session)

    def _on_user_session(c, e):
        if e is None:
            print("MAAPI user session started!!!!")
            c.load_schema(_on_load_schema)
            #c.end_user_session(_on_end_user_session)
        else:
            print("MAAPI user session failed:", e)
            await async env.exit(1)

    def _on_load_schema(c, v):
        if isinstance(v, Schema):
            print("MAAPI loaded schema!!!!")
            print(v)
            c.end_user_session(_on_end_user_session)
        else:
            print("MAAPI load schema failed:", v)
            await async env.exit(1)

    def _on_end_user_session(c, e):
        if e is None:
            print("MAAPI ended user session")
            await async env.exit(0)
        else:
            print("MAAPI end user session failed:", e)
            await async env.exit(1)

    print("Starting up...")
    sess = nsoapi.maapi.MaapiConnection(env, 4569, _on_connect, _on_connect_error, opts.record_to)

actor test_maapi_transaction_set_values(env: Env, opts: Opts):
    def _on_connect_error(e):
        print("MAAPI connect failed:", e)

    def _on_connect(c):
        print("MAAPI connected!!!!")
        c.start_user_session(UserSessionDescription("admin", "127.0.0.1", "system", [], None, True, UserIdentity(None, None, None, None)), _on_user_session)

    def _on_user_session(c, e):
        if e is None:
            print("MAAPI user session started!!!!")
            #c.start_trans(DB_OPERATIONAL, MODE_READ_WRITE, UserIdentity(None, None, None, None), _on_start_trans)
            c.start_trans(DB_RUNNING, MODE_READ_WRITE, UserIdentity(None, None, None, None), _on_start_trans)
        else:
            print("MAAPI user session failed:", e)
            await async env.exit(1)

    def _on_start_trans(c, thandle):
        if isinstance(thandle, int):
            print("MAAPI started transaction thandle:", thandle)
            #c.set_values(thandle, EKeypath([EList([EBinary("http://tail-f.com/ns/ncs".encode()), EBinary("devices".encode())], False)]), [], lambda c, e:_on_set_values(c, e, thandle))
            c.set_values(thandle,
                EKeypath([
                    EList([EAtom('http://tail-f.com/ns/ncs'), EAtom('python-vm')], False),
                    # EAtom('logging'),
                ]), [
                    ETagVal(EAtom('logging'), EAtom('start')),
                    #ETagVal(EList([EAtom('http://tail-f.com/ns/ncs'), EAtom('logging')], False), EAtom('start')),
                    ETagVal(EAtom('level'), ETuple([EInt(C_ENUM_VALUE), EInt(1)])),
                    #ETagVal(EList([EAtom('http://tail-f.com/ns/ncs'), EAtom('logging')], False), EAtom('stop')),
                    ETagVal(EAtom('logging'), EAtom('stop')),
                ], lambda c, e:_on_set_values(c, e, thandle))
        else:
            print("MAAPI start transaction failed:", thandle)
            await async env.exit(1)

    def _on_set_values(c, e, thandle):
        if e is None:
            print("MAAPI set_values success thandle:", thandle)
            c.apply_trans(thandle, False, 0, lambda c, e:_on_apply_trans(c, e, thandle))
        else:
            print("MAAPI set_values failed thandle:", thandle, "err:", e)
            await async env.exit(1)

    def _on_apply_trans(c, e, thandle):
        if e is None:
            print("MAAPI applied transaction thandle:", thandle)
            c.finish_trans(thandle, lambda c, e:_on_finish_trans(c, e, thandle))
        else:
            print("MAAPI apply transaction failed thandle:", thandle, "err:", e)
            await async env.exit(1)

    def _on_finish_trans(c, e, thandle):
        if e is None:
            print("MAAPI finished transaction thandle:", thandle)
            c.end_user_session(_on_end_user_session)
        else:
            print("MAAPI finish transaction failed thandle:", thandle, "err:", e)
            await async env.exit(1)

    def _on_end_user_session(c, e):
        if e is None:
            print("MAAPI ended user session")
            await async env.exit(0)
        else:
            print("MAAPI end user session failed:", e)
            await async env.exit(1)

    print("Starting up...")
    sess = nsoapi.maapi.MaapiConnection(env, 4569, _on_connect, _on_connect_error, opts.record_to)
