import nsoapi.maapi
from nsoapi.conf import *
from nsoapi.maapi import *
from nsoapi.proto import *
from nsoapi.schema import *

actor main(env):
    def _on_connect(c):
        print("MAAPI connected!!!!")
        c.start_user_session(UserSessionDescription("admin", "127.0.0.1", "system", [], None, True, UserIdentity(None, None, None, None)), _on_user_session)

    def _on_user_session(c, e):
        if e is None:
            print("MAAPI user session started!!!!")
            # #c.start_trans(DB_OPERATIONAL, MODE_READ_WRITE, UserIdentity(None, None, None, None), _on_start_trans)
            # c.start_trans(DB_RUNNING, MODE_READ_WRITE, UserIdentity(None, None, None, None), _on_start_trans)
            c.load_schema(_on_load_schema)
        else:
            print("MAAPI user session failed:", e)

    def _on_load_schema(c, v):
        if isinstance(v, Schema):
            print("MAAPI loaded schema!!!!")
            print(v)
            #c.start_trans(DB_OPERATIONAL, MODE_READ_WRITE, UserIdentity(None, None, None, None), _on_start_trans)
            #c.start_trans(DB_RUNNING, MODE_READ_WRITE, UserIdentity(None, None, None, None), _on_start_trans)
        else:
            print("MAAPI load schema failed:", v)
        await async env.exit(0)

    def _on_start_trans(c, thandle):
        if isinstance(thandle, int):
            print("MAAPI started transaction thandle:", thandle)
            #c.set_values(thandle, EKeypath([EList([EBinary("http://tail-f.com/ns/ncs".encode()), EBinary("devices".encode())], False)]), [], lambda c, e:_on_set_values(c, e, thandle))
            c.set_values(thandle,
                EKeypath([
                    EList([EAtom('http://tail-f.com/ns/ncs'), EAtom('python-vm')], False),
                    # EAtom('logging'),
                ]), [
                    ETagVal(EAtom('logging'), EAtom('start')),
                    #ETagVal(EList([EAtom('http://tail-f.com/ns/ncs'), EAtom('logging')], False), EAtom('start')),
                    ETagVal(EAtom('level'), ETuple([EInt(C_ENUM_VALUE), EInt(1)])),
                    #ETagVal(EList([EAtom('http://tail-f.com/ns/ncs'), EAtom('logging')], False), EAtom('stop')),
                    ETagVal(EAtom('logging'), EAtom('stop')),
                ], lambda c, e:_on_set_values(c, e, thandle))
        else:
            print("MAAPI start transaction failed:", thandle)

    def _on_set_values(c, e, thandle):
        if e is None:
            print("MAAPI set_values success thandle:", thandle)
            c.apply_trans(thandle, False, 0, lambda c, e:_on_apply_trans(c, e, thandle))
        else:
            print("MAAPI set_values failed thandle:", thandle, "err:", e)

    def _on_apply_trans(c, e, thandle):
        if e is None:
            print("MAAPI applied transaction thandle:", thandle)
            c.finish_trans(thandle, lambda c, e:_on_finish_trans(c, e, thandle))
        else:
            print("MAAPI apply transaction failed thandle:", thandle, "err:", e)

    def _on_finish_trans(c, e, thandle):
        if e is None:
            print("MAAPI finished transaction thandle:", thandle)
            c.end_user_session(_on_end_user_session)
        else:
            print("MAAPI finish transaction failed thandle:", thandle, "err:", e)

    def _on_end_user_session(c, e):
        if e is None:
            print("MAAPI ended user session")
        else:
            print("MAAPI end user session failed:", e)

    print("Starting up...")
    sess = nsoapi.maapi.MaapiConnection(env, 4569, _on_connect)
